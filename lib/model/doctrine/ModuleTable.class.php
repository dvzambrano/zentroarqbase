<?php

/**
 * ModuleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ModuleTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object ModuleTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Module');
    }

    public static function formatData($array, $page, $count = false) {
        return array(
            'metaData' => array(
                'idProperty' => 'id',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'id', 'type' => 'int'),
                    array('name' => 'code', 'type' => 'string'),
                    array('name' => 'nick', 'type' => 'string'),
                    array('name' => 'name', 'type' => 'string'),
                    array('name' => 'comment', 'type' => 'string'),
                    array('name' => 'icon', 'type' => 'string'),
                    array('name' => 'customicon', 'type' => 'string'),
                    array('name' => 'component', 'type' => 'int'),
                    array('name' => 'parentid', 'type' => 'int'),
                    array('name' => 'is_base', 'type' => 'bool'),
                    array('name' => 'is_active', 'type' => 'bool'),
                    array('name' => 'is_multientity', 'type' => 'bool'),
                    array('name' => 'is_multientidable', 'type' => 'bool'),
                    array('name' => 'increase', 'type' => 'string'),
                    array('name' => 'permissions'),
                    array('name' => 'dependencies'),
                    array('name' => 'attributes'),
                    array('name' => 'relations'),
                    array('name' => 'deleteable', 'type' => 'bool')
                ),
                'sortInfo' => array(
                    'field' => 'id',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $count,
            'data' => $array->toArray(),
            'page' => $page
        );
    }

    const table = 'Module';
    const akfield = 'code';

    public static function getAllPaged($start, $limit, $filters, $simple = false) {
        $select = 'p.*, dm.*';
        $query = BaseTable::getAllPaged(self::table, $start, $limit, $filters, array('t.Permissions p', 't.DependentModules dm'), array(), false, $select);
        if ($simple)
            return $query['results'];
        return self::formatData($query['results'], $query['page'], $query['count']);
    }

    public static function findByAK($ak) {
        return BaseTable::findByAK(self::table, self::akfield, $ak);
    }

    public static function getAll($filters = array(), $simple = false) {
        return self::getAllPaged(0, PHP_INT_MAX, $filters, $simple);
    }

    public static function deleteByPK($pks) {
        return BaseTable::deleteByPK(self::getInstance(), $pks);
    }

    public static function getByParent($filters = array(), $checkeable = false) {
        $select = 'p.*, dm.*, t.is_base as deleteable';
        return BaseTable::getByParent(self::table, $filters, $checkeable, $select, array('t.Permissions p', 't.DependentModules dm'), array(array(
                        'field' => 'permission_id',
                        'realfield' => 'id',
                        'char' => 'p'
                        )), 't.increase ASC');
    }

    public static function getCompleteTree($pk, $permissions = false) {
        $filter = array();

        $obj = new stdClass();
        $obj->type = "int";
        $obj->field = "parentid";
        if ($pk == '' || $pk == 'NULL')
            $obj->comparison = "null";
        else {
            $obj->comparison = "eq";
            $obj->value = $pk;
        }
        $filter[] = $obj;

        if ($permissions && count($permissions) > 0) {
            $obj = new stdClass();
            $obj->type = "bool";
            $obj->field = "is_active";
            $obj->comparison = "eq";
            $obj->value = true;
            $filter[] = $obj;

            $obj = new stdClass();
            $obj->type = "int";
            $obj->field = "permission_id";
            $obj->comparison = "in";
            $obj->value = array();

            for ($index = 0; $index < count($permissions); $index++)
                $obj->value[] = $permissions[$index]['id'];

            $filter[] = $obj;
        }

        $nodes = BaseTable::getByParent(self::table, $filter, false, false, array('t.Permissions p'), array(array(
                        'field' => 'permission_id',
                        'realfield' => 'id',
                        'char' => 'p'
                        )), 't.increase ASC');
        for ($index = 0; $index < count($nodes); $index++) {
            $nodes[$index]['children'] = self::getCompleteTree($nodes[$index]['id'], $permissions);
            $nodes[$index]['leaf'] = count($nodes[$index]['children']) == 0;
            $nodes[$index]['expanded'] = true;

            $module = Doctrine::getTable('Module')->find($nodes[$index]['id']);
            $nodes[$index]['dependencies'] = Util::getArrayOrdered($module, array(), 'postorder', 'getDependentModules');
        }

        return $nodes;
    }

    public static function getMultientityManager() {
        $q = Doctrine_Query::create()
                ->select('cbr.*')
                ->from('Module cbr')
                ->where('cbr.is_multientity = true');

        return $q->fetchOne();
    }

    public static function getMultientidables() {
        $q = Doctrine_Query::create()
                ->select('cbr.*')
                ->from('Module cbr')
                ->where('cbr.is_multientidable = true');

        return $q->execute();
    }

    public static function getIconByNick($nick) {
        $modules = BaseTable::findByField('Module', 'nick', $nick);
        if ($modules && count($modules) > 0)
            return $modules[0]->getIconName();

        return '';
    }

    public static function getTreeIntegration($entity, $pk, $filters, $path) {
        $allrows = array();
        $sonpk = false;
        $dependencies = array();
        $module = BaseTable::findByField('Module', 'nick', $entity);
        if ($module && count($module) == 1) {
            $module = $module[0];
            $dependencies = Util::getArrayOrdered($module, array(), 'postorder', 'getDependentModules');
        }

        $rows = array();
        if ($pk != '' && $pk != 'NULL') {
            $sonpk = json_decode(str_replace('[specialquot]', chr(octdec('42')), $pk), true);
            $pk = $sonpk['id'];
        }

        try {
            $rows = Doctrine_Core::getTable($entity)->getByParent($pk, $query, false, false, true);
        } catch (Exception $exc) {
            if ($pk == '' || $pk == 'NULL') {
                $rows = Doctrine_Core::getTable($entity)->getAllPaged(0, PHP_INT_MAX, $filters);
                $rows = $rows['data'];
            }
        }

        for ($index = 0; $index < count($rows); $index++) {
            $rows[$index]['id'] = str_replace(chr(octdec('42')), '[specialquot]', json_encode(array('entity' => $entity, 'id' => $rows[$index]['id'], 'unique' => $path)));
            $rows[$index]['dependencies'] = $dependencies;
            $allrows[] = $rows[$index];
        }

        if ($sonpk) {
            $module = BaseTable::findByField('Module', 'nick', $entity);
            if ($module && count($module) == 1) {
                $module = $module[0];
                $relations = json_decode($module->getRelations(), true);
                foreach ($relations as $relation)
                    if (strtolower($relation['moduleid']) != strtolower($entity)) {
                        $mod = BaseTable::findByField('Module', 'nick', $relation['moduleid']);
                        $dependencies = Util::getArrayOrdered($mod[0], array(), 'postorder', 'getDependentModules');

                        if ($filters && $filters->method) {
                            $method = $filters->method;
                            $rows = Doctrine_Core::getTable($relation['moduleid'])->$method($filters->params);
                            $rows = $rows['data'];
                        } else {
                            switch ($relation['typeid']) {
                                case 'manytomany':
                                    $query = BaseTable::getAllPaged($relation['moduleid'], 0, PHP_INT_MAX, $sonpk['id'], false, true, array(
                                                'operator' => 'AND',
                                                'conditions' => array('au.id = ?')), array('t.' . $sonpk['entity'] . $relation['moduleid'] . 'Relation r', 'r.' . $sonpk['entity'] . ' au'));
                                    break;
                                case 'onetomany':
                                    $query = BaseTable::getAllPaged($relation['moduleid'], 0, PHP_INT_MAX, $sonpk['id'], false, true, array('operator' => 'AND',
                                                'conditions' => array('t.' . strtolower($sonpk['entity']) . '_id = ?')));
                                    break;
                                default:
                                    break;
                            }
                            $rows = Doctrine_Core::getTable($relation['moduleid'])->formatData($query['results'], $query['page'], $query['count'], false, true);
                        }

                        for ($index = 0; $index < count($rows); $index++) {
                            $rows[$index]['id'] = str_replace(chr(octdec('42')), '[specialquot]', json_encode(array('entity' => $relation['moduleid'], 'id' => $rows[$index]['id'], 'unique' => $path . $sonpk['id'])));
                            $rows[$index]['dependencies'] = $dependencies;
                            $allrows[] = $rows[$index];
                        }
                    }
            }
        }

        return $allrows;
    }

    private static function loadRelationsRecursively($module, $entity, $array = array()) {
        $result = array();

        if (!in_array($module->getId(), $array)) {
            $array[] = $module->getId();
            if ($module->getRelations() && $module->getRelations() != '') {
                $relations = json_decode($module->getRelations(), true);
                if (count($relations) == 0)
                    return $result;
                else {
                    $pos = 0;
                    foreach ($relations as $relation)
                        if (strtolower($relation['moduleid']) != strtolower($entity)) {
                            $result[] = $relation['moduleid'];
                            $mod = BaseTable::findByField('Module', 'nick', $relation['moduleid']);
                            $relationdep = self::loadRelationsRecursively($mod[0], $entity, $array);
                            foreach ($relationdep as $r)
                                $result[] = $r;

                            $pos++;
                        }
                }
            }
        }

        return $result;
    }

}