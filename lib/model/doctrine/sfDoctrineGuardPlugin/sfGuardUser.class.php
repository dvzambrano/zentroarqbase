<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    SGArqBase
 * @subpackage model
 * @author     Donel Vazquez Zambrano
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {

    public function checkLocalDBPassword($password) {
        if ($callable = sfConfig::get('app_sf_guard_plugin_check_password_callable')) {
            return call_user_func_array($callable, array($this->getUsername(), $password, $this));
        } else {
            return $this->checkPasswordByGuard($password);
        }
    }

    public function checkLDAPPassword($password) {
        $server = Util::getMetadataValue('app_authldapserver');
        $searchinUser = Util::getMetadataValue('app_authldapsearchinguser');
        $searchinUserPass = Util::getMetadataValue('app_authldapsearchinguserpass');
        $rootDN = Util::getMetadataValue('app_authldaprootdn');
        $filterDN = Util::getMetadataValue('app_authldapfilterdn');

        $exists = false;
        $ldap = ldap_connect($server);

        if ($ldap) {
            $bind_results = @ldap_bind($ldap, "CN=" . $searchinUser . "," . $rootDN, $searchinUserPass);

            if (!$bind_results)
            //Cant bind to LDAP server;
                return false;

            $dn = $filterDN;
            $filter = "(|(sAMAccountname=" . parent::getUsername() . "*))";
            $results = ldap_search($ldap, $dn, $filter);
            $info = ldap_get_entries($ldap, $results);

            if (count($info) > 0) {
                $cn = $info[0]["dn"];
                if (@ldap_bind($ldap, $cn, $password))
                    $exists = true;
            }
            ldap_close($ldap);
        } else {
            //Cant connect to LDAP server
            return false;
        }
        return $exists;
    }

    public function checkPassword($password) {
        $authmode = Util::getMetadataValue('app_authmode');
        switch ($authmode) {
            case 'ldap':
                return $this->checkLDAPPassword($password);
                break;
            case 'mixed':
                $value = $this->checkLocalDBPassword($password);
                if (!$value)
                    $value = $this->checkLDAPPassword($password);
                return $value;
                break;
            default:
                return $this->checkLocalDBPassword($password);
                break;
        }
    }

}