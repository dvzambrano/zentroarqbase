<?php

/**
 * sfGuardUserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUserTable extends PluginsfGuardUserTable {

    /**
     * Returns an instance of this class.
     *
     * @return object sfGuardUserTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('sfGuardUser');
    }

    public static function formatData($array, $page, $count = false) {
        return array(
            'metaData' => array(
                'idProperty' => 'id',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'id', 'type' => 'int'),
                    array('name' => 'first_name', 'type' => 'string'),
                    array('name' => 'last_name', 'type' => 'string'),
                    array('name' => 'full_name', 'type' => 'string'),
                    array('name' => 'email_address', 'type' => 'string'),
                    array('name' => 'ipaddress', 'type' => 'string'),
                    array('name' => 'username', 'type' => 'string'),
                    array('name' => 'password', 'type' => 'string'),
                    array('name' => 'is_active', 'type' => 'boolean'),
                    array('name' => 'is_super_admin', 'type' => 'boolean'),
                    array('name' => 'created_at', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'last_login', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'deleteable', 'type' => 'boolean'),
                    array('name' => 'Groups'),
                    array('name' => 'Permissions'),
                    array('name' => 'Entities'),
                    array('name' => 'Person'),
                    array('name' => 'customicon', 'type' => 'string'),
                    array('name' => 'picture', 'type' => 'string')
                ),
                'sortInfo' => array(
                    'field' => 'id',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $count,
            'data' => $array->toArray(),
            'page' => $page
        );
    }

    const table = 'sfGuardUser';
    const akfield = 'username';
    const akfield1 = 'email_address';
	
	public static function getAllPaged($start, $limit, $filters, $simple = false) {
        $select = 'p.*, grp.*, prm.*, e.*, true as deleteable, CONCAT(t.first_name, " ", t.last_name) AS full_name';
        $query = BaseTable::getAllPaged(self::table, $start, $limit, $filters, array('t.Person p', 't.Groups grp', 't.Permissions prm', 't.Entities e'), array(
                    array(
                        'field' => 'email',
                        'realfield' => 'email_address',
                        'char' => 't'
                    ),
                    array(
                        'field' => 'name',
                        'realfield' => array('first_name', 'last_name', 'email_address'),
                        'char' => 't'
                    ),
                    array(
                        'field' => 'groupid',
                        'realfield' => 'id',
                        'char' => 'grp'
                    ),
                    array(
                        'field' => 'groups',
                        'realfield' => 'description',
                        'char' => 'grp'
                    ),
                    array(
                        'field' => 'entityid',
                        'realfield' => 'id',
                        'char' => 'e'
                    ),
                    array(
                        'field' => 'profile',
                        'realfield' => 'profile',
                        'char' => 'p'
                    )
				), false, $select);
        if ($simple)
            return $query['results'];
        return self::formatData($query['results'], $query['page'], $query['count']);
    }

    public static function findByAK($ak) {
        return BaseTable::findByAK(self::table, self::akfield, $ak);
    }

    public static function findByAK1($ak) {
        return BaseTable::findByAK(self::table, self::akfield1, $ak);
    }

    public static function getAll($filters = array(), $simple = false) {
        return self::getAllPaged(0, PHP_INT_MAX, $filters, $simple);
    }

    public static function deleteByPK($pks) {
        return BaseTable::deleteByPK(self::getInstance(), $pks);
    }

    public static function getLDAPUser($username) {
        $server = Util::getMetadataValue('app_authldapserver');
        $searchinUser = Util::getMetadataValue('app_authldapsearchinguser');
        $searchinUserPass = Util::getMetadataValue('app_authldapsearchinguserpass');
        $rootDN = Util::getMetadataValue('app_authldaprootdn');
        $filterDN = Util::getMetadataValue('app_authldapfilterdn');

        $user = false;
        $ldap = ldap_connect($server);

        if ($ldap) {
            $bind_results = @ldap_bind($ldap, "CN=" . $searchinUser . "," . $rootDN, $searchinUserPass);

            if (!$bind_results)
            //Cant bind to LDAP server;
                return false;

            $dn = $filterDN;
            $filter = "(|(sAMAccountname=" . $username . "*))";
            $results = ldap_search($ldap, $dn, $filter);
            $info = ldap_get_entries($ldap, $results);

            if (count($info) > 0) {
                $thisuser = self::getLocalDBUser($username);
                if ($thisuser) {
                    $user = $thisuser;
                } else {
                    $firstName = $info[0]["givenname"][0];
                    $lastName = $info[0]["sn"][0];
                    $email = $info[0]["userprincipalname"][0];

                    $thisuser = new sfGuardUser();
                    $thisuser->setFirstName($firstName);
                    $thisuser->setLastName($lastName);
                    $thisuser->setEmailAddress($email);
                    $thisuser->setUsername($username);
                    $thisuser->setPassword(Util::generateCode($username));
                    $thisuser->setIsActive(true);

                    $thisuser->save();

                    $thisuser = self::getLocalDBUser($username);
                }
            }
            ldap_close($ldap);
        } else {
            //Cant connect to LDAP server
            return false;
        }
        return $user;
    }

    public static function getLocalDBUser($username, $isActive = true) {
        $query = Doctrine_Core::getTable('sfGuardUser')->createQuery('u')
                ->where('u.username = ?', $username)
                ->orWhere('u.email_address = ?', $username)
                ->andWhere('u.is_active = ?', $isActive);

        return $query->fetchOne();
    }

    public function retrieveByUsername($username, $isActive = true) {
        $user = false;
        $authmode = Util::getMetadataValue('app_authmode');
        switch ($authmode) {
            case 'ldap':
                $user = self::getLDAPUser($username);
                break;
            case 'mixed':
                $user = self::getLDAPUser($username);
                if (!$user)
                    $user = self::getLocalDBUser($username, $isActive);
                break;
            default:
                $user = self::getLocalDBUser($username, $isActive);
                break;
        }

        return $user;
    }

}