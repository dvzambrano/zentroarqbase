<?php

/**
 * EventTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfEventTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EventTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Event');
    }

    public static function formatData($array, $page, $count = false) {
        return array(
            'metaData' => array(
                'idProperty' => 'id',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'id', 'type' => 'int'),
                    array('name' => 'code', 'type' => 'string'),
                    array('name' => 'name', 'type' => 'string'),
                    array('name' => 'comment', 'type' => 'string'),
                    array('name' => 'allday', 'type' => 'bool'),
                    array('name' => 'start', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'end', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'location', 'type' => 'string'),
                    array('name' => 'link', 'type' => 'string'),
                    array('name' => 'customicon', 'type' => 'string')
                ),
                'sortInfo' => array(
                    'field' => 'id',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $count,
            'data' => $array->toArray(),
            'page' => $page
        );
    }

    const table = 'Event';
    const akfield = 'code';

    public static function findByAK($ak) {
        return BaseTable::findByAK(self::table, self::akfield, $ak);
    }

    public static function getAll($filters = array(), $simple = false) {
        $query = BaseTable::getAllPaged(self::table, 0, PHP_INT_MAX, $filters);
        if($simple)
            return $query['results'];
        return self::formatData($query['results'], $query['page'], $query['count']);
    }

    public static function deleteByPK($pks) {
        return BaseTable::deleteByPK(self::getInstance(), $pks);
    }

    public static function getSummary($start = '', $end = '') {
        $rows = array();
        $q = Doctrine_Query::create()->from('Calendar cbr');
        $calendars = $q->execute();
        foreach ($calendars as $calendar) {
            $query = Doctrine_Query::create()
                    ->select('e.*')
                    ->from('Event e')
                    ->leftJoin("e.Calendar c")
                    ->where('c.id = ?', $calendar->getId());
            if ($start != '' && $end != '')
                $query->addWhere('e.start >= ? AND e.end <= ?', array($start, $end));

            $rows[] = array('name' => $calendar->getName(), 'baramount' => $query->count(), 'lineamount' => $query->count());
        }

        $rows = array(
            'metaData' => array(
                'idProperty' => 'name',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'name', 'type' => 'string'),
                    array('name' => 'baramount', 'type' => 'int'),
                    array('name' => 'lineamount', 'type' => 'int')
                ),
                'sortInfo' => array(
                    'field' => 'name',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $q->count(),
            'data' => $rows,
            'page' => 1
        );
        return $rows;
    }

    public static function getLatest() {
        $startasarray = date_parse_from_format('d/m/Y g:i A', date('d/m/Y g:i A'));
        $startrenew = strtotime(date('d-m-Y', strtotime($startasarray['day'] . '-' . $startasarray['month'] . '-' . $startasarray['year'])));
        $weekstart = date('d-m-Y', strtotime('this week last monday', $startrenew));
        $start = date_create_from_format('d-m-Y H:i', $weekstart . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);

        $end = date('d/m/Y');
        $end = date_create_from_format('d/m/Y', $end);

        $q = Doctrine_Query::create()
                ->select('e.*')
                ->from('Event e')
                ->leftJoin("e.Calendar c")
                ->where('e.start >= ? AND e.start <= ? ', array($start->format('Y-m-d H:i:s'), $end->format('Y-m-d H:i:s')));

        return $q->execute();
    }

}
