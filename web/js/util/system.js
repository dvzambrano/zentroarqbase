// default trade mark logo
var base64logo = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAhYAAADICAYAAAC07KilAAAACXBIWXMAAAsTAAALEwEAmpwYAAABNmlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjarY6xSsNQFEDPi6LiUCsEcXB4kygotupgxqQtRRCs1SHJ1qShSmkSXl7VfoSjWwcXd7\/AyVFwUPwC\/0Bx6uAQIYODCJ7p3MPlcsGo2HWnYZRhEGvVbjrS9Xw5+8QMUwDQCbPUbrUOAOIkjvjB5ysC4HnTrjsN\/sZ8mCoNTIDtbpSFICpA\/0KnGsQYMIN+qkHcAaY6addAPAClXu4vQCnI\/Q0oKdfzQXwAZs\/1fDDmADPIfQUwdXSpAWpJOlJnvVMtq5ZlSbubBJE8HmU6GmRyPw4TlSaqo6MukP8HwGK+2G46cq1qWXvr\/DOu58vc3o8QgFh6LFpBOFTn3yqMnd\/n4sZ4GQ5vYXpStN0ruNmAheuirVahvAX34y\/Axk\/96FpPYgAAACBjSFJNAAB6JQAAgIMAAPn\/AACA6AAAUggAARVYAAA6lwAAF2\/XWh+QAADN+ElEQVR42uxdZZgk1dk9t7zau0fX3ZFFEtwhENw9uCbAB4Hg7u4SCBYsuLvrLqy7+86O90x7den9fnRV0zuMdI8sy26d52mGnamuqqvvua8SSilcuHDhwoULFy56A4zbBS5cuHDhwoULl1i4cOHChQsXLlxi4cKFCxcuXLhwiYULFy5cuHDhwoVLLFy4cOHChQsXLrFw4cKFCxcuXLjEwoULFy5cuHDhEgsXLly4cOHChQuXWLhw4cKFCxcuXGLhwoULFy5cuHCJhQsXLly4cOHChUssXLhw4cKFCxcusXDhwoULFy5c\/LHAbYqNUjeSgq2EAJQC0VYThgEw3aRxBIBXZvDJjDiGhXiAZ9HcHIWVXoXyQduBWlr+WkkgqG81Ud9MsSYqICxGsf92Evr3q4SSNX7zfppOoVkWZi\/WkaFefP31d\/AlP8HDD94F2uYd4mkLn09NYOAAE36fjCXLdZx52Hh8\/sHL+NPOewKmlbuYJaiLWvjolxSaEwZEjgUhgGVRjBohI7p4EkaPGIHq\/v2RTCmojAjoVynhm6kZzFym4azDA3jg9SaMGl2FVTNfw+0XHY\/3vpuNfXbZCgAwdW4c703P4pQ9I1gbTWHJGpB+w8J7zvnhpbpM7apFza312HnPw3HAvvti+qIEDt7ViwsfSj2zYll96Mw9Vxz17Csf4eO3HwMAPPHyjzjnxF3w+FsxREIcyiI+PHHH2Zg+5QdEyioAAK0ttdhyuyPx9yvvQSAAPHj93zFj6o\/5v2\/OYDkemVQMjfXLwDC9v52wLAtVVRGLxUAIyf\/esiwEg0HIsgzTNHv1mYX3SyaTUFU1\/2xKKQRBQFlZGdqrDN3b1aIJIaCUIhqNwjCMkr8fDofB8zzS6TR4nockSb36ns74qKoKhmFAKQXDMPnndAeWZUFRFGiaBsuy1hv3wjEKBALweDy9Pv69MX8Mw4AkSchkMkilUqCUttuOtvPNJRYuXPxOqAyz0FVr92c+Thy2rF4ZszwxcDf\/h98EVn1x5aE1a9ctGjh6F+z\/t\/vQvwyoLWPZc+5qfPXpd5NHE4+IAYO3f7qyYtJZv9nMKMAQgpAPEHmAEA4sy9mbJw+GYQHq9r0LFy5cuMTCxUYPR16HQwyGVnMIyAxAAI8EsEzu74Uy\/b2flKvufil2O+IE3MCxqMb7WPTpYeepFB+MGz0Il935CgZWiahtUMedf1\/zO9OmKGM8\/SgyfCV+qPGcGVy0aAmAu3Mnbg4WAJ\/EoCrMYPZS84q1DdoPDKNOUjUVAJDNKsgqqZzaxoULFy5cuMTCxcYNhslJ7E9+Sj\/w7uT0Piua9U+bWrT5io4V3pB3QdZE1NIVAMBDr0bvvPi2xisQklC5wwgMU17VF7x2wlEqxQe7H\/A33H7HndhyTH\/c82rjsS9\/kHp15WqVeAZx4IKjMDHYjMTn+381ZdGPbwLA\/11zD\/baZwfABDwSRt\/4dMNzs+oH7xxOhu5ds2LZJIZZBiBn4akaUA+ed8fKhQsXLlxi4WLj1FKYFjhCURXm4JMI7nwhet3VDzZdDJ5gyi+JLUl5JSbXAQ3v3H7f+FHll\/1lzz\/jzlfVZ666ofYM9Pei3+jhGJp8WZ\/\/+skHJk18edvt9+PCqy7BsrXAv99qevjWx1svhGDBO8ALT9lgDKE\/ovbdY26ura+\/AQDOv+Ru3HrjZUgkDDz9Yerq655pvq251oBnGAOxfOvtKnwAFYNIxOMYM3oETjz3DiQTgCy5Y+fChQsXLrFwsVGBAOBkEVGNh1fX8Ni7zf+69f74zd7hIrweAzG1CgOGVKDm\/UPnNS6dfMtDrz+Fhz4g7111\/ZJDMTiAASOGYEDzE6mZb\/99\/yww6dzL78UlV12Chvps1Xm31X84Zaq6vVRmgchVqOgfQVXDI+lFn1x0UjyL9wYMHo\/bn3gPB+4xEr\/M1ba865W6l7\/4XNmSCbMID2CQtIDAiH12TU2PjK5taFkCABP\/tDN23HEUlq1IoaLS5w6gCxcuXLjEwsXvo5YAJJGBzOdMHRYlkCVAEAWwoghfhODJV1L\/uO+Z2N3iUAkeyUBcjWDIsHLEPth9ii87fYcZi6N48dvgFw88NHdfdngEA4cNQNmaOxqnfXz1vhYw9+EHH8aF\/3chXvg8sf8DL0dfmzVXDcpVBKxvFAaVA9ycE2ZOnfTq0Raw4ohTb8dtt18FSQbz7IfxW258rOFqJQ34BxNQ4gEJDcAEcS2Sk6+Y2dDQ0goAg4aMwuGn3orVNQZ4lqDMD3glBgxhwLFutDbHsjknV+o6oLhw4cIlFi76klNQIOBj0FijH5jQ6SCeh6rqVKkYGGyub1w3d9ftBzfOWFZ2+n0vJR9l\/AICXgNxLYKhw8rR8tEeU7SGyTu8M7UBz30fmfzIgwt2ZAaXYeCQ\/ihbefWaGZ\/dse+gQQOWnnbho7jw\/w7HK98lrjr1urrbYVH4Bgpg\/cMxMrASLV8c8cLK5bPP6DdwsHnR5ffhxBOPxs\/z9V0eem3dS5N+yg7lyxgEBhAYwjD0i\/AIN\/9HXfvxvy5vaI4\/DADlA8bi\/me\/xvix\/TBnbgyRiIxfFuCSOSuyS3RT+yieVjd75shyFGo6CRALAOtOfBcuXLjEwkXfoH85ixU1+gXXPtXyiEdiQaADwbGgTzyH44e+PHrHPQ4bccZ1654FKMoiFPFsBENHlGPdW7tO3iowfeebv2\/mb\/uff9on78\/aih\/eD8NGVEGa9Y+lM75\/fJ9w5ei1n373C+ANeY6\/ruGd196P\/oUvY8D5AvBX98eg1NtY8sJRl8QyeHDb3U7Arbffg+FjBogPvBx99LG3m8\/SFQL\/QMBkQvBUVqI\/nYfE9+e8P33x5AspsGbIsOE496LbscWuh2FwtQRTUVDbYp5wz2uNN82v84wKxfWbJaJ9lFG1zXqMCWFgZZNQ4w1giEsqXLhw4RILF70nYXI\/GWKHZBJMXZL9y\/X\/bn6EEgJwOlRpLGjtV9jJuva4g854SzjndmZSS3MCFYNYJNQIhgwvx9rXd528fdmsnb+f3+I59hZu1ifvzB0ljhyMoUMj4KYeM2Pe5DcP3nqX4+ouu+4BeP2hbY+9cvVbU37JDPX2J6DeQejfzwt50WV1U76+72jBUzbpnzc+ipNPPR7TFpn733HDqud++CnbT6xi4PdzgG84hoR0iMuvqVs5+faLW1N4HQCOOvV2XHnNVRg+GJi\/TMekmYmj3v4mcftX05XRVKEIDfYi4ud0JfWrKYQQgmQqBU3TwTCbnnnEsiyEwhFIopRPWEQIAcPySLWsBkwV4CS4iT5cuHDhEgsXPeMT9n+zei5znGpYyKoUtS3asFOvrX9VV4HygRbSGI4yZgX2H3TDGZdc\/9bH5z22Y+O8BQtRMYRBQo1g8LByrHl91592qJi563fzWqoOu5aZ\/f7r86vkrUZiUKUP7I+HTJ4\/88MDL73qjtjlt16Ju57Pnn3xPUueisYt+IfxoPJIjKpMQ\/1xv2\/nzvrymFGjRzY\/\/PokZMwK\/+OvNz379DstRwNAYAiBzlQjUB5AtfYV4l\/844mFyxdfDiB14KGn4OKrbkG\/QYPhFYBvp8UOePCN+H2Tp6njDYXC248HFwT4XJ4sizAEhMkJWCWTxuCB\/TBi2DBo2qanxeB5HrNnTUdDzSoIggjTsmBZFigAjmbBcQKoSypcuHDhEgsXvcQskNZyqbxZHqhvMj0HX1L79ooVZrhiOEHa6g+\/EAe+\/tPVZ73zxEu3vLfj6p9\/WCSXj2CQ1HOaijVv7PLDTlWzd39vRnTsAf9ipn727jyfZ+I4DK4QkPpk589rVk0+5ITz79JO+r\/LuYeeiT57\/zPNf2MkCm8\/GWJkCIaQyVj16iF3R5ujV5xx4a14\/OFr8PZ36nH\/vH\/5k\/XrjKBcDjC8DC44GMP9UWSmHjd3+rTXzwUwuar\/IFx01UM4+7Qj4PUAr3+eOODZj+J3\/DI3O1HLUHgqWIQrAU3TkdArMXRgGGUxi2llNHAChZJqBWNkcfmltyAebUU6k9nElFEEHo8Xi+b8hFjzOgg8A8OwYNk8IhwOQ+iDtNouXLhwiYULF+DA4OFXYv9dsdiYGBnJImOG4ZU5CD\/s8OQxZ5x+x3XvHzvn26+X9isfziClB9FvQAXWvbn31D9XzNr9fz81b3fARWTa5K\/mw7ftFhhaZqHpo+3fbVgz84iHHr0Px5zyz6H7Xbju\/fnzk1t6IgCkcpT1L0dozWPa9I8vOGVAv8hrTz77NvY\/4ojq8+5JPf3iB+sOMkHg78fAFIegqkJAsP45c+2H\/3dDcyx525bjx2HYtsfg9DNOxEF7jcGnP6b2\/e\/niVvf\/SG1g5mkkCt4VJRRaKqBhB6Bv7wCY4U4uBV3K4unvjs9q6aQyayCBeCfNzyPwSN3wqezHwVYzyZHLLKqDovmTDy8IANEh67rvV4Xw4ULFy6xcLGZwbSAgJdgxAAWHglIxGWwnACBzaku7nqp6ZbHn285OjCMh2Z5wMoReGbu8+75Fxx9waLA3T9+++yKLSMDTST0MIYMrULju\/tN3bb8lz8\/\/EnTnvtfhG\/mTFkI3zZbYnhEwYLnxrw8cYR+8qSaRvy8tuLIfc6veX3h4hTrrQCoPBzDBgiIf3XY4jkL3j98l32OXXTH\/Y8gqlaev\/OZqx+uXZHh5AoGkAIQy6oxmF+G9E9nfT1r7ndnUWDlhZfeiYfvvQILmoHvZ+s7nHRTzePvfpnZVk9akPvz8EUIdE1HIhuGt7wSI8QUxLonUtGZtz1Qs27dAxbQCgD9+\/fHX0++FX89\/lQo8RWg1HSzfrtw4cIlFm4XuPjNKbXNTwcRP4Ola8yTXv8+eUiksjytJRsqdaXl\/0YM8K34aDpOvvKe6LVSfx6UCCByf3jmnzz10n9sc8rKyrvffv6OFbuEB2vIohzV1eWof333KePLZuxw5atNhxx3DXl\/8fQlCEyciMHyGix+bvy\/\/ZJ4\/te\/1OCrefI9J1247DLwBvz9eHDBERgoLsOCp3d9Pcg0nfzoE6\/r+x19zKiLHkw889U3i3YzCIFvgAD4RmBIBcAuuLZxwbe3XZq18NKf9zgWR5x8G046YiQWrLZ2vvY\/dTd\/8ENmHyNlQa7iEKpkoWkGkloZfJFyjBDjEOofijVNvfuR+vraR02g0emL7Xc\/AedddjtGbT0UK1cAA\/gsCNy8Fi5cuHDhEgsX65MKhkDTdAB28S9b280QYGW9us31\/46+1LpMhzBmCLRZ56zYb7y4AqFthlxwTf0L8LMQJQaGbzCq6q5dfOHfggcv9d7\/5CMPrDkkMFCFxlZCkoJQP91jylYDFu1wwv11R\/3jFvLmqkWLEd52IirMRZj3zLg7Dt6139VPfbxKPP8J4euXn5u\/s9SfAyP74KsaiEjLW5j70tGXbj+23\/2vfhrFt8tDl+161pp7mmpSkMsYCJ5KBMvCqFR\/QNN7pz1fs3bFZd5gVfTMs+\/HX446Edk0tv\/H3XV3fTsjuXey2YJYzSNUzsLQdCTUMPxllegvtIKseTCemnffo7W1NfcbQIvTP+PGjsD+J9yMPQ89EVrSwpJ5rQiGwpB5HrJHAthNK+c3z4sIhSLg3UIpLly4cImFi+5g8KBBuOf+F3Di0Sditz23R3MjhVck8ISBv9\/Z8GjrOgVle2wFb9MHiDe9cshd387GhY+y365a3EpCwzgYnuEoq7u\/4fw9Vh4QG\/ryjY\/ct+4Ef1kSKilHZXkZpKnHTLv07xU7BPf77tRzb255PlG3CqEtJmIAsxjJTybeesON1153+qW37Hj27S0fffROfcQ3jIUpVqNfvyCERddF539z66H33HrTpLOuun70hfcm3nzp1YVbEh\/g7ecFFxyCQd4Y1OknLpk9\/X9\/t4Cvjj37Rpx35Q2oWY1t\/\/N6zd0zlmb3aWm0IARZVAznoGs6ktkgPJFqjPAmIdY+kmiadscD6+rqHqY2oWBZBjvudSJOPvd6bL\/1UKiEx5RZCQwtszB0gIDVTdiurkHdYk1d9GWGU41NgmASgGUYxFoa0dy4DtFok0suXLhw4RILF90RKAwMU4fkMQEG8MgEniBw\/4vRWz79MrmzMKI\/gqQZ8Z9OvvyN1+5a8N6MrT7\/4M2FQ0MjGVD\/KASjbyUrV1269\/w9Fpz70rPZ871lMZhCBfr3q0T8w31nHbKPsuO2\/\/jpvt2O1f+pxloR2WJLjBSmY8p\/tr\/qjOP3vvPiG245YtgBrW\/H6tYhMFqCJY3CiEgW5s8H\/bRw5sdH3HH\/PU27HXvZDaMOabixubYJcj8BjDwYVVUS+BVPWAtf\/vstJnDLQYeeaJ51yc1ISSO2fPLV5O2f\/Vh\/cCwB8B4G5f05GIaOpBqCt6wKw+UsxNr\/KC3f3fLowrVr76JA1O4NbLXLCfjXtTei\/7BRMHTAKwN6PA1ZMPtPWaIftXBt6thvFnC7+pJLm6trX\/xYZyqa\/uhzwDJNWGCRUjTEWxuRiMfg8ciQ3egPFy5cuMTCRenMArAMC5qey8fgDQJLatVtrnqu+VqEBFT2K8eKN\/f5+ZqTt78n8OfL77npr0v38w4BdGkMypQpGFr\/t8PLDv3goFemj7tSwDxYQiUqqyoRnnfW\/JXrvtpbrP6XecHxV\/m82R0x8M+HIRD7Fivf3P88AE9+M2kWDtztrw3+gf9FnBkCPhjAEGEOYp8e89iKVUsu2G7PEzFmn8sOPvKUlTc2J1OQB5XBX94fZeZyNL57\/M9K3bRT\/nrY0UuPPfcOVAwYOf79H\/TbX\/9k+WHRRh18mEd5JYFhGEhqQXgjVRgipSCueyKdXHDv04tWr7iTAvUAMHrsRGyxw6HYfZ8jUTl2a+wwGli9PI1Mxgx8v5Ie\/P2czEnfzcke0NhoMHpShzR0IHhtyfK5CxqaCGn44xIKClgA\/B4OnCjDpAxEnkdFRQU0TXNJhQsXLlxi4aJI0NxH4oGg3wtdT+Hehx7GLrvthqRl4p\/3Nj2hNWko225LKIufN\/4yev4R449YfPRepzRdxlepoN6RqJQaUD33pPMH7PHsuM+jB99NsvNgSRUYOLASgXnnzJ3x0zP7AGg1qIzkihfOtVbceSMX2\/f6lWtnT4+1ak8zDIPGphRa1346adQ+N93g3faxm8QlL5trvjr59OYkXgSA8gHb4p3Xvm3O+geCDW6JIf0BefV98SUfXnZpv\/7lz3w4bzm40PCRT75t3Pf24ysObanVwJUJKB\/Iw9ANJNUQPOEqDPemITf+J9P87W1PLKlZfTcFGhkGOODg03DocVej39ABCFR4IBNgVW2c\/+JH88CfZmknT16kHLB6teHTMxZIkIXfz8LrJ\/AHALGhdoHu9OUfV10Fj8cL0ecHAQVnN8YlFC5cuHCJhYuSTqkBL4vBlcDCRmt4PGvuDeBNjjViAHDfcy3Xf\/RlbAdh2AAYrcswOnrFiWfe\/Tx3+xvBN5TsXHj6D8agShbWp7veVrX7MYkp5PiXoysXwlNegaqqKvjnnj13zg9P7wcgZyIwdXByCFmKuhXzvjxft+z3sCzwRIPJAmtnvX1\/dTY6bvGUd19QNHwCADvtcwb2O+jvaKxfFh80fCQtq5tFjK\/OemPmoun\/d\/Jxh9U99+q7kauetx598f1VJzSszYIL8ygbIsDUdaS0nMljhCcLvubxTO0nNz3Z1NJ4H4B1DAPsf8ipOO5vV2O\/fUejuQWorTfYObObd1+wyjhm2lLtyHnL1SotSUEkAm+ARaDMTr9JLWQ1AkkH2Pjy5QwAXhT+WJySWjAMAzwvIRgKQuB56LruLgwXLly4xMJF+5oIjiHwysSO7lj\/OG1ZwMBKDt\/OTO\/\/0KvRy2e3DNlbWP1yHYDXTjzmUOjAdve\/HLsJfhHB8gikqae+d+QJp3z80tS\/zps9dT68gypQWRGEOOOo7+auXHZtWn99VGSHnWrLxxzS38MCZQvPmTfzh6f3NoHmNtIMYABCkdO950\/MDETJAiFqasm0j05QtF+rhw4aXI1k\/Vew0pmYZ\/GzPyz98sEXMxqeBoD9D\/s\/\/O8znHHvXYtPQBWPskECLMNASg3CU1aFoWIaUv2TmfrPbvlPfcO6OwA0jB8\/AVvvfCy22\/lAnH7s9miOAbPmpSd++kvyhCmLtZMWr9MHxBsNQGDgCTLw+5zS7xSmYUG1BBCxP6QqCf0CKWTUlY0BCRA84h+EUFAYpgFR9IDjZZggAKUuqXDhwoVLLFx0Mrg8h+ZoFN98swrHHXc4sll2PdleFmSwpskYd\/LV6z6qXxlkB26zCsu+uuzanbYbnTzi6NNx+JUtDycbswhN3BLcikdrzz9UvmBt9T0vfPDkyqFytRfl1dUoX3nJvKm\/vH0YQNCwbvnS8IxTRo7f6c7vWxtWDJj+w3\/2pm1JRZcCD2BYDhxvAdlff\/\/z9y9jxs+vwLSsunWr6vZwSnKcetZNGDl2F7z77XKGGSjCK+pIqT54ItUY5VWB1Q+n10266YnWRMs9ABp33ud4HHHqDRg1bABGjvRj2kI6\/NkPWk54\/8fkCXNW6hPiLSbAEkh+FpH+PAgBqEVhmiY0kwcVquCLyKiQdMjKLDD1n66t\/\/K\/b9StW\/42ACCb\/MPMD4HnwPAsCCWwLNfc4cKFC5dYuOhqcDkOjc1RJJdPwqknHw6eZdYrRCoIwJ3PNV9Xv9xgh+xfDe\/cv08F8OxXX32CN37Aje+9V7uzMLofPPpqjMcL18\/nnjv75f+aRyIkIzSgGhXr7q6f8\/mDhwKIcwwBL3hhsuXK4nf\/vl9DxvLAMX\/0AjzeCILhMAxdR\/3aKAAdAwYOxaFHn4J0ci1YkjQtawCYcAVG+BRk59+eWjP73n8nEq33A6g7+KgTcdE\/78DYrQfjp5kYOHlR4vD\/flxz7Lfz1N1aG3MRMLyfRbiKB2OTCcsyoZs8KF8OOeJDf4lCysyBUfNhXbb2vQ+bV099J6bgawqof6R5IUoSfF4fREkEtSyXVLhw4cIlFi6KByEMDDvCoyyMfBVKAoLpC7N7PfVu9ASMGQlPbBoW\/PDEDW+8\/BBocPi2J1239AaUCSivLEdw7v+9agaHpOe3jLh+izENoHw1mJqnMvM\/vOIQFVgJAIZlgZgGOEGEyQsxIBvrqzbpdnvufeRRbL21D\/H6+RgxblRs0LQQAtHHM\/Wf3fZUtKn2zmC4rOH5l97GwPH7oLyC9S5d6z3isnsbT\/lhXnK\/aJMFLW2BDXMIVXFgmZx5wLJMZE0GJlMOKRBEpQeQ1AVgol+0Gus++Lx+2devRVP0Cwqk2r6XLPuw7c4HQFVi+T7fWMDzAmKtTWiqXQmvzw\/LsmAahrtAXLhw4RILF6Vh4KBBuPv+F3Dqqadg2222RUvShMAS+D0s7n6h+TokOQzfRsTaDy57Y+LoyCdHn3gRTrwh9qjeqCC07VYItX5BY0vfvNvsP3GmMjtEQxVD+ifiurepvuYrBZj2e7TJ0HVsve2fUT1wBGbNnI9Q0Ie6JT\/Mj310xbNrY6tv3GbCiLWff78GK9IVXJkkHfLip+kTv5vb\/JeaFTUBLUvABBj4\/SwCYRaWTSZUjYHBhiH7Iyj3AH66GkLr20p87isfNa769q2WpPEZtWuEtEPfcOaZZ+Ccf96HumQSn7\/5IkRp4ypG5vUFsXzxLHz6zkroug5C3KomLly4cImFi+4MMMsgo6hYuSaJkeOB1lYLg6t4vP5p\/LTXP2nZSxy\/FeTmz43Uuu9uuuGNp\/DBL7j1f2\/W7MSP6I8B\/gQyky+4pb5FmzluELCqSX1tbcOSjaJdoigilUwh2hwFL8hYvXjKz8nY6p8nTBiPGfOmYsZKz7H\/urnx+Zp1q2VDIYDMwBfk4S9DLqLDsqDqgMGEIfjKUOYFPHotrLqnM2bjh9+21nz5blNz+iMNqF2vPzkOouhBOp3A2PFbYZudD4NZsR8euGE3yCLw1Bvr0NRYC68vuFHNg6yaRTIRA6WAyylcuHDhEgsX3YYgSlCUDN5\/80kcddgeCAwWoBqWfNdLLdeBDWBQxMK6d\/7x0N67DZs\/cPtTtt7nzDXXIMSjon85uKUXTVu5YskNAMGSBdMhCICW3TjapesaDFMHY\/uNaLY353PPvwjAg6vvXn35qp\/TsmcLCcFI7jvUsqDpFDr1gfdWIxgg8GjrwMVfNbDyk58Tyz96va4p+pbZhkywLANRFNB\/zP446oQTcOj+h+LlT9Zi\/Dgfdt+5P\/7zdhZZFcjquZwPrjbAhQsXLrFwscmBUoBjAVlg7RPrrzb\/Fz9OXD5jRnJ4aPutgJUP1dHksiv\/9\/46XP6c+G5CH4z+2wH9Yp9j0bePXGTfDZZpAuzGRZgEXgLPi2BYDpah4cBj\/wk1tC3e+7Fl0IqUNRLDRciMBV2nUC0POG81QgEWATYBIfkJ1AVv\/ty69P3XG5ujH1JgaeH9+w3ZGtvvdhTWrVuD3XffCf\/8+6n4YJ6FoIdH0AOU9xsGEwbWrWiFrmTAs\/0Q8jKoLOMh+8Lw+nwb1Xzw+oKQZC8opbmoY5f7uHDhwiUWLoqBZVFwLMHQfhxSa2l5S5rsBOAbJZtzNlxdb4246dnmqxCuQH9vK5pn3nS3HKowrrzx+WGTZqaU0ay81pjP+9Ysfu6etInJG5wNdSDwErF1MPQomhobMWbsODx4\/8uoqOqHgRXDQUBw6aW3Qw4EQHQVi5v07VfVqEFO9EFlq+CP8BggZsBEv4K5+IPZ8VXvf1i7bs1bAGYCAMtxIITFEceejFBwENTwvigftiX+tEUAGRXwCsDASkBNJJFSTAQG+hGWEuAoYbIaM8Yw6PB3vk8MXRYN7b1yYavVtHDSSYwY3mi8NykoeEFCY8NasBzn2kJcuHDhEgsX7REIC4IogOMZaGpO\/U4BSCIDmqQDX\/w8fs+kFb7j+aafUwCGmownBQAPv9ZyZc0CRazefSSYFTfMa2pufYgCePGRa1Z6BWwRz4LY59k+jUEk+LUkO5CLWmA5wNI0gGI9c8LorfbG0adeBcNQ0NgQxcStB6F81ACsXg1wXBCUAjwPZFJAdRBYm67YTZeqMHJgBkLyZ7ArP1jesuSl99fV1v0PwFTnzoHqCdjvr8finNOOx\/zaMhywmw8DK0X8+z0DtdE01GgjCFjoMiesafQPzqT10ctazDGLV8Unzl2RHVbfYo6MZ2i\/tGrhmVfigNeHUPyNGa1zvtQ2tvnCsgwCPi9ER2vhwoULFy6xcFEIUZJQv3wdeHk0vB4\/TEMHARCSOTz9Y\/T2Fx5rPT6ycz\/41r7yGYDo6Sf\/FUtb8afH328+C4MHoZpZjsbp999mK8bhD3hBQCxkU3363sFIBBwvwLIzbhLCIhj0Q5Y9oLCgM3GAEFjmryk5dzrwUgQG7YtkrAnDqyXUZVK45YFfwHG\/nb4emcfyGm3C4MSnML959cHFK+a\/bVJMBmDs89eTkLQqseN2E7Ddrgdj1lqK\/Xepxl8mAOoUIJ5W2frp8TFNTerI2mZ91Lo6uoWqYdDaRnP0FYmWQemsBTVhIZuxAIkBGAKGJZAlAr66HMOqGpH5\/K2HWzeyuSLJEvx+PxjCuKTChQsXLrFw0ZGwkFFTsxImGYcJ48dAy1LwHMHadQh+PjX7V4ysRLV\/LRbMfO2Fvx1\/OI4++gScfH3t9dkaE4P3DoEuuvan2mjq1V81CH2vHuc4Dj\/\/8A3irS3wBsJgOQ4sy4JlWRiGARACXo7AhAmWteD3+xEMhvDZ82fipXsaYZpWcc8hOA8UugHUTBw3ELsddzeGjTsQ5xwWxGfzgXgLeFnURphWZsQ3PzYO+\/EXdstpi5VRDVFrdGPC6K9oIJksRVahgE4BFiA8gSQxEAMsPEE2l5HTfh61DAiBKjBNL9Q0rFvz3sY0T3w+H4LBIEzTdEmFCxcuXGLhomMQMIgnsyjXFmCHrcagroVBvwiLjyelDly0PF3uHzEUWs2TqwB8ceKJR2FdKw58+b3UwdhiAiLqNKz6+bFrC++nGyYEvu+8MzmOQ3l5OSZ9\/zVkjxeiJIPSHFEwnERNlIJSAxSAxxcAIQS6rsEyVURCfmQVBRlFg9mFfDRoLmnXKaediv8++yDm1oTGPfi6cvh1\/4mOnbs6PWxdgzUqrVrVCRXIxkxkEyYg5zQQRCCQRQLR\/kkcwxD91XRDsb4ZRzVYVEoAXfL2OxoQ+709GCgAhmXh9\/vh9XhcUuHChQuXWLgoDn6vgIVLVmF1I4Us5kjBx5NTRyDFosJvou675z7ddWK1csAhJwf3uxFPcANHYbuqpaj\/5uLnY1l8W3gv07QAvm+mg0MqGIaBP5DL79BZGmmC9Ut1M2yusJc\/5EUgTJDNZpFKpaCqHWfSPvLYM\/H0vx8CiLf\/aTes+nHGzGwEIgPwBOAJOIZAEAmEAAtPaH1CVSiDqV1SvqP3JLBg8ZXwZGegaeln7\/zec8J51XAoBI\/Hkw\/DdeHChQuXWLjoQmMB+H1+LFi2BEuX1WL40AFoaMwO+Hhq+q8oK4ekrkS69pePDrvwFvw4Rz\/wpzduGjzQ+u7lFT9MerspaX20wSZYAakoJAvdgfN9URTB8zwymQzOPPMMDBw4AKlUzjckHmvFNtvtgJNPOhEAcPm\/m66Y8YsSCY2SwLSJOslrIGj7\/ZuLp6DrX0dY6AbAcBJMcKDEi\/BAD6xF705pimW\/Qcc8ZIOAYVlEIhHwLOuSChcuXLjEwkXXx1EKIOAhsExSZhKRkX0VTbXNHDwe4PtZmUNWrlF9wWHlQOObywB8MWuRikWr73tPWXBbeBUQ26CTqxdJRVuC4aSlPvvsczBu3Lh2r1tSo27z8OstFzHVPFhCYdnaB4Jfa6bkzC\/IOYxagAUGFmVhUB4sL4PlZLAcD5ZnwOasJejnA7LJKHiaAPQ6eFtjaFz80qvtvQPP82AYBoZh9GniLEopCCHw+\/0QeL5X+9uFCxcuXGKxaXIKUApUlnHQLHbgxY8npzf99PEDQnbZnYcfegSGj6jCo28rR0DhEZENqPM+eB+AumjBTxg3fvsMgEzfvyQFx7KglgmA9AmpKBTYLS0tuOvuh\/H0M0+gsZHm\/QgYQtCvguCWJ5puV5tNlI3ioWs5wWtaDAzKguX9sCgL0eMFyzIAAbxSzlIiEB0CSUJL1YKz4mDMmKk3r2zw8a3pdcvmLNVlLa61rliVydSthBqLrorrdTowq+07siyLsrIyKIqCbDYLhmH6rOsty4IkSfB6vdB13V0wLly4cInFpgyGEIB0nPyJ2NeYln2q\/q28BssSjB8m4IufE0fc84b0Vm1tPaFT3pqpaiYoUZHUMHzy4uzuiFSAzyxB88pvPgGAVSsXwe8PbZB2SrKIRCoFRvCgvFzoM1LhIBgM4vXXXsCVV1yMsWPHoLCDX\/2SnvnSl+EDpNH9QEUWsg9gCSByJgSiQE+vg4dTEW9abYa9aTXbuqTWSNc2cHosmlUaakCjDamWFcu1RLpW0RHLmlhtVzTVuopNYW3HSVmW831AKe1TB0pKKUzT\/NUR1oULFy5cYrHpwrBsGwbtWBuhmxSEAAIHsAyz3qUcSyBywJvfpO++7cGmfyEwChP7La+bpZmTR44ehz9tOxZvf5c5bNUSRfJvGYIUe21hPKl8AwAt0Xr88N0Hfd7GQCCAQCCARCoBTvCCgPa5Ol4URSTicXz46VcYOnYM6ht1EGoi4OO8L368\/HpZqsd4IUHTLavqRbMxmm5ZXaspzWtNxGKJhvnzszTd2ho319SaaAHQbLYphU4AMPg1UxhBLqu5VSShcIW8CxcuXGLhonc1FQAU00JNo44BAQHUsn7DLTiGIKlZqIspGD3Mg0iIA2tSmNav4kvgWUyenT7stnuj\/0I5h34jeLQs+HkBgMRtt9yI\/gEeH3+XORblW2BClYbmac99bNryMHeS7VsBFwwG4ff7oes6WCZnCtkQDoyEEJSVleGm66\/GE08+DW8gDFHyggJ02dzJl1itzep8gnUaRY0FtBCbEzjvxtv\/b3ZAJCgAns19ywTyKUlJgZaA53lIkgTLsuD1eiEIAnRdh2VZ7gJw4cKFSyxc9D4oBUzT1lh0IGssCuimhYCHxZI1afw4pQYjhg9GNpsBIQz6l7P4YEpmK\/gY+LwcBGpCa509HQA8o\/+MHxuw55q4ueMQ4wla\/\/odd69as\/amDdW+QlLxe4AXBFBQrFs+G7wgwuuPwB8uy6jZzNsq1tcSsTk2AsP+PcPZfzZyBEGWJIDS\/DBRSiHLMliWbdeMQSkFy7LgOC5vinD9G1y4cOESCxd9fKrORRLkj8S\/uSB3DcsQcByBqhv44rOPEd\/9BLCcB5alo6mFYMEK809gAcrIIFoTZHXRXBnAtX+\/EqK\/P5rnvfd0U+2K6yygfnMhFUDOaZHjeIQiFaCWBUPLINliQOB5eD1leaGfyWTAMAxkWf4NSXAIAmtfS9rc34m46AjFtJ8Q0qdRIX19fxcuXLhwicUfVLvh8QWRbK3BhMhabDF+KyjpLATeYp58z9gChIDh\/fBhKeqjNfNVAHN+fg2U4ltg\/YRXfTppOA6BQACyLG9UJ3TCMOCYnMnJ5\/PmHSYJIQgGg6CUwrKsDgWw0fO2EABBAOUAKgGMB7ANIeQxSumCvnbedM0vLly4cImFi9+AIYBlaPhm8k9IiMORTCThFZnRjSkMZkQCwvnApOYuy6b0+RYAgSWASaFtAKcGSgGf349gIJATxD13TnwJwF8A1AIwkHNlKPxZzO8s+6fzUQnD6KZp6gB0ABoA3TAMHR37XTL41cWCtdeF8xEBCPaHtz\/OvyUAXgAyAB8AP4AIgJBzY9uMQjVNu6DP5w7D5Krcuum7Xbhw4RILF44vgEcEZI8Xs2bPwq5\/OQUTdxiBb6entqxtqGVFgcArA5mauYt0C5pfZkApoJp9L0gIw8EfKgPLsr1Ve2IEgCNtoVyxKQ6pU1wtk8nM3hDP8vl8Lqlw4cLF739Adrtg4yAVhAFkFshksXVWI2OIqUFmUhhSAcQS2Ylq0gIFB54DGGXOZBVAWrGQyeYiTfrauu7z+cBxfG8WtNrXJhW9Q3xsH4O2n98ThBAkk8kvLMv6T18+RxRFVFVVged5l1i4cOHC1Vi4pCIXFTJiAIdpi7K7\/\/3B1HfphvorvEbt3atqW+BZGMDkma1\/BgnD078KIWsJ1i37djYLgOdz1TdNEzD6UGvB8zxkWe7tsNXDus2GGWa9LJaOL4UjVAsJhXNdZySjUBg7zpo9GlI7DFVVVSOdTl\/d16QiEon0ynu7cOHChUss\/jjcARybE266ZZfi\/vVci0GVLD6fnTripH81vy37fNgySBWlUcc+O\/fHqIGh8L+Y0LaRIWmMaH0oveb7m2+OJrWPAMDUN4wgCYVCIIT0pnNgPwA7lvIFlmXBMAwsy4Ku69B1PW0YxhLTNNdQSussy2qhlCqw81gRQjgAAsMwHgAyIUQG4COEyAzDyAzDeAF4CSE+lmU9AIKmaWYEQTBYlg30REgzDANKKeLx+N0ApvXVuEiShIDt7+KSChcuXLjEYjMCIYBq5FQTHENyJcptBH0s5ixT9jzrxua31QwwcAseXB2rM4TBax+uRLi\/ZwJd+VqA++7aR2c2119vAK0b8t0DgQD43i9qtQ+AcFETlMtNUV3XoSjK6mw2+66u618hV5tjbU8P\/Mg5XQYAaLIsVwqC8DEhpEfEguM4xOPxxbqu39pX48KyLMLhcK7+iVtwzIULFy6x2LwQ8rCYvkxBi6Zh67IEYi0aCJtTW1SFgK9\/odvF0iykgRyyaYqkwiGTpbjl\/\/aGpmVmMMCgDZmfwgHP8\/B6vX0RxnhIMad+lmWhqiqSyeT32Wz2fgAfIxfp0VtQAagMw0QDgQD8fv\/Zuq5X96S9rF2uPJlMXgZA6StSUV5e7pIKFy5cuMRic9ZYaAag6BZa4lHoGYATWFAKZJMWBEFMkaAAywRAKXRDBeE5BMqq0Vy3ImNtiMqk7RGi3jeBwNYO7NbViZ9SipaWlsWZTOZiAJ\/2VRv9fr9jTthPVdUbeuLw6TiMxuPxJwB82JekwonOceHChQuXWGyGcHwsJJ6DrptQTAYRjxemqYPzAGBZQg0KcDmhxhCAmgYqB4xGOloHRVM2+DsHg8G+MIEAwN7I+Vh0qCVRVRUtLS0PmKZ5GTrOPdEjyLIMn8\/ntNFPKX2sp1EkHMchmUyuUVW1Txw2GYZxSYULFy5cYuGizYmTUMQzWSieAaCmBZ0H6pJmGIYOlgcsygCMRCgIRE8IZQNGo2bl7A3wZr+WX+3jVN17dUYq0um03traejKA1\/vi4ZIkQZKkvInHFtB3ABjVU02CpmlIJBJXAIj1xbvnQn45t2rqZgRCiNeyLJ1Sqrm94eKPAjePxQaCZQEcY8Hr88EnsiCqgVgCaG5WoSgmA8aAYvoghcohC4rMUA2WlkBFvyGIlFf3+fuZFgXLCigvr4DX6+3LVN37dEQqUqlUqrW1dfe+IBUcx6GiogLl5eXwer0wDMMx8fwVwD96uPk7JpDnKaWv9kWn+f1++P1+l1RsXjicUppiGOZzQgjvdocLV2PhIqcHsBUBAS8D02AHtMRiVk3NurqBgwh22WJr9AtaWBNt5aCVYeTYADzLrmma\/d0LX5sgIAwPjuMBhgXDEFhW34UUMgwLXvLAMs2+VLNviVz9jN+Qikwmo8ZisQMA\/NybD2RZFn6\/H7Kcy8XVhjAFADzaG6QllUqtU1X1X32lqQgEAq75Y\/OCAOBOSik4jtuD47gzDMN4slhznVMjx02a5sIlFr0lJDeSIo+OOqgqzKIhaoy78n+B+a3fP3nn2tkvXh2QeHwxaSUGDhmA0EDvoEBFE8Sf9\/lqwcyvjzWAlpxZQrM\/fTwJOA6BQBCmYfT1JrQ9CpKEFiSSQktLy4kAfurNh8mynA+X7UADczuA4T0lLrquIx6PXwmgubc7zEnV7SbA2uzwNwBjnHXCMMxwAEVlk7UsCwzDIBKJQBRFpNNptzdduMSip9iYdIYBnsHzk2OnXfFo87ON6ZFkuHfosAFBQAhX4fOvvsTCxYOxeF7NOvrdDS\/Ob115yu\/xjn6\/f0PZ7vdsKzQty0Jra+tNAN7uTaIUDochCEI+oVY7OBC9ZwJ5mVL6Ul+QivLycjAM42orNj+c1UYDwRbzJYdUlJWVged5GIbxu6e2d+ESi00CMxfXbRTvIfIAOLbyzqfTDzWu0klgCx1BbvetU3UVTGNMtZ5+5EaMn7AFlixZfEOydeXv8o4ej6evfSoKsXNbwdna2vqNYRg39pYgLjR7dEKUgug9E0hdNpu9tLc7yo0A2axxMH6bmbbL6KhCUiEIAnRdB8uybm+6cIlFb+C6Ky\/eIM8hBNA0Cx6vhIBfgqZZ8Af8+ZTODAwIHG3mvOc28UP6B\/RMDJnA8HFaxhqttEYXsVoSkfL9EI62AsuXbvjB57gN6RD4ZwAj7dMXeJ5HNptV0+n0Jb2ldQkUX879TgDDekpibBPIFQAaeruz3AiQzRr\/V+oX2pIKV1PhwiUWvYx9DrlogzzHsoCyiIiVK9di2oyV8Moc5ixeBQoChmEBcODNJosNrZgheUaN0JPrkKFBDNzigK295fMXqZaMhqYEOPb3Cc7ZwMJr+8LTuF1L4x4APYqllWU5b8opsvLqIQDO6xmhXM8E8mJvd5QbAbLZayv27SmpcOHCJRa9jHNP3WXDEAsK+Dhg6vyxmLidhV239uPGm+\/C\/DlTIAkiCGHAk3pwXN28FRqO4VgLVCpHfTqwxcr5s15jWQH1q2fB4\/Fs8D7ieR4ejweWZW2Qkw2l9MDCZycSiZW6rt\/Zk3t6PB6EQiEAKNZcEEbvmUBq+8IE4kaAbPa4wSUVLlxisRGivnHDPMcwgYHVADgWosShIkyww85\/gsQnMGz0VjB0DT5RxdLmqvnTJiUAMIgngH7lu+w4ftiLMIQBAAWyugW\/DiTj0Q3WR16vd4PVmqCUgmXZQU6582w2i3g8fjmAbrmrcxyHSCSSzwxaQrTEHQAG96QtfWkCcSNANntcggLNnksqXLjEYjMFAUCpCU2zAEhYtHAepk2fjQyq0dLcAIGjAFMzNyyOMdakPFyoAgiHh2699NtUKJldEWN5CTzPwdDV\/P26FNS98M6KoiCT2TAlSCzLgiiKz\/j9\/oey2SxaW1v\/CeDN7tzLCSFlWbbUjfQwAOf2qN9+NYG80NtRIG4EyGaPbW3i65IKFy6xcLE+PN4Q1q5cgPFjBmHC0DJoShIBH7d0EQJ1DaTfoJHWZ1j70Rn\/aUkhBujQDR1ZpfdIQ1EaBACqqm7QfjEM4+F0Oj0LuYqiv3TnHoFAAMFgEIZhlCp8IwAe6fFisRNh9bYJxI0A2ewhAnjF\/umSChcusXDhLPbcT0kATMMEwwnoN2pn6DoFa6XooHTDktjS5wfN\/+bqXRXau4mg\/kD4vrtfDAQCCAQC0LRuJQy7C8CgnmoUbBPIv9DLibDcCJDNHu\/DToblkgoXLrFwkScVHokAQDirpDxemaybPn0+vvxmKnTdgCDwYLSGi1cuXgETmOf2WPdIRTdzbRyJNsmGSkWBCeQ5Sun\/erNtbgTIZg0vgA\/QSWG+tnBJhQuXWGwOpIICIR8DBhZ73kPGt19P2S44dvjgoQ3NjSgLyFAyWfAiQW2rOs9VcpcOnufzRcO6gQr0UhRIMplc09smEDcCpDhQSvO1LzYh7Ihcttl+RWoqLAAbHalwnIwdx2w7\/bg7aV1iselBEDfMc4gJeHmAZ0jVWXc3fTv358zYwMQdMbrfsdcxa6+8xaAjIAoMGE4E4GbA645ALysrW28DKxF3FLtxd7Rp8jwPTdMQj8cvA9Dam23bQBEggwBsBWCI\/alALus9AWACiANYDWAVcjlFlvXBO4y0n5s\/eNsLgkeu2JYAQLZP8B4A5QAqkcuQuh0h5AcAZxX2Uwl9VmYL8XEARgDw223PAlhht\/lH9FGp+\/b4pD0vLyhlHhJC9Egk0pZUMHZb2jIuao9tb0ACUGX3Y8Qel2oAQwFUEEK2tyzrI0VRLnaIBSEEgiCAENJ2nCqR0yDubn8\/bL97wh6LrwG8av97g2zhAEbbc2OgvT7K2qwPDUA9gLUAagAssNeKi82NWOjahnlO0ANMXY79T76+6a0l8xVveKyIVLIOiwPn3jhx3A8fNqz6YaY3PA4cL6C+zq16XAp6IUriKABn9uQdnJNXPB5\/EsAbvdm2srKyvowA2c1u\/14AtsCv9fCKwSIAXwB4HsCMYtriCJTf7NqEjLQs611K6YTuNsSyLPA8P5pl2ad0XZ\/ijImjxeho6AAcD+A0W4h1ddTIIGeSuAvAzD6a0iEAFwK4DLmqukXDNE0Eg8G\/MQyzu2EYYXvf5mxyxrYZX4Jc+u8MpbSJEBIlhDxNCPmoTX\/1B3BQAdH02aTL+Rm2iUS5\/Wn3ZGSTh50KzZSiKIJhGFhWPgt5NYDbAJyOjgPf\/gTgOELIQ4SQyy3LeqSPtFRB5CLEDkCuxMCQbtxjCYBJAD6yP4q7Y28GxOLay87vlfs4E7uisgoclyvowwkiZDmXWCooZTBt3dAdl6w9yBsYaIAQwMcksLqxgunX\/5pH2XUn7LJs4TR4fWHomTh4AlgkZz7Z0EpdCruE+x8Efr+\/OyGlDnrFBMLzPOLx+ApVVS\/rbcLUBxEgnE2kLgUwqiMh4HwopYUbfyHG2p8Lkas2+y8AkzsS4qqqQhCE3wh5QggMwxjCMMwEpxhWdzQzNrGAJElH6Lo+xSEU9u\/a68PTAdyE0px1PQCOsz9vUkr\/DqCpF4SaCGBXACfYn25lwrPHbIhlWUNK\/N5YQgiy2ayVSqU+CgaDTobaSkrprDZapO4f+wlZbxACgUAhITjfXotMkXuuxLLswx6PZ49YLHZ0IcFv2yclYlsAFwM4tiOiSQjJP6sLTeJo+3MagCRyET0PAVjoUopNmFiMGDmodzqH46HrGj585yXEW6Pw+ANItjQjm83AFwxBV7MICMmbdtzr0z3nKPvvSZTF4FgWVmod1slb71wR2vuaZZMfu00gSYgCEPID2u9gGiUk52CaUQHD2vjHLxAI9MSvAsjVAqnuCaF0yrknEolLAKR67dgaCvVFBMiJAO5FB2YfhmHylWQNw8hHFnAcl0+S1sEmuguASQzDvATgbEpptu190+k00ul0u9+nlH7F8\/yxfr\/\/aUmSAjbZKFmoAoAgCAcAuMrR8giC0FbjMw7AiwC262FfHs1x3P6U0mMNw\/i0G98P29qSv9on4rLeOuR093uapk0DAF3Xoes6LMuq4nm+wtEqdEIyi4WUZ2geT6G55unuaA0ty4IkSUcFAoH\/xGKxs9vTXJimWew7j7OF\/n4d7\/M5MWgYBnRddxL6rff7zs5AyOXHORe53Dz\/RM5sslmDbIoZ\/nor7RMHQKPAux8vh5LNYsiQAVg8byouP\/NAAAYGDCyDlopi6Jhtt2va4ttpy2sUcIyOcL8BqIq\/iuWfnX1uIpF6qnBN\/F7uZ4Tk1BbmRj7cPYwAAYCj0UOzhXNyaW5ufkTTtF4rPONEgPSipqIawEsA9ulMQ2JZFtLp9KpsNvuqYRhTKKWthBCJ5\/ltPB7PqV6vdwyltMP3sjf1lel0+jBd1+c6peidzb4LswQAeDmO+1sgELhKluXBJWZLzWtYYrHYRF3XZzuZVwsE7ol2P5C2J88iTp8djr+maScnEomXNU1br62iKKKysrI9wTbRMIxvkDN7\/L4bOyF5jV9jY+OOlNJfGIaBJEmOJvY6QRCu5DjOU0gySyV+LMsim80uamlp2QKAWVFR4WTEfQnAST1pgyAIaG5u3l9RlM\/bEgtKKYLBILxeb0fzlgVwP4AO16\/jcKooipXJZD7WNO0jy7KWA9AZhikTRXEPj8dzoiRJZZZlFUVkbKJ+pa7rd0mShEwmg1Qq1anz8abovL1JEotltb2T\/Ilhcmm7l6wlAEMR8RNQUcC86Qvw7pNn4vuvf8bw0cNAkysxeI8bbprivfF6HwEqVl++bv7n9xysALNcpVjx4Hke5eXlxQiqjlABYE5PtBXOhhaPx5clEomte4unOtVXe1FTcQCAt9CJep3jOGiahmg0eptlWTcCaPfhoij+MxKJ3OcIlvY2QFtQZ5PJ5D6KokzqQEPRrkmkgACwwWDwDa\/Xe0SpmynLsohGo6erqvq8JEkIh8PORn87gKucZznF6JyTJyEEPM\/ntRvFziuHXLS2tu6lKMq3he1wUq8XOifa0RBHeb3eNwkheSFUbD8V8z7Op7BfO9JSONEZsVhsejqd3r5wbrMsC03TYJqmF8BwABGO47YNBAIXejyeYaWQepZloarq6mg0OkGW5XQkEoFhGA+iGxVa25u\/iqJ82tLS8tf2nlteXt6egygATADwCTowh1FK80SqpaVlhqIopwGY20G\/8x6P59FgMHhOsZode\/wnMwxzcDqdbnE0ei6xcIlFbvIyBLpJMWdJChQGwn4OiQyPqkEBZGrn4cLTjsHiZYswrNoHWWAQ2fvFZQ0L3tRWTHlxZ3PDeZl3Y8HykCQZlmVBUTKg1NoI3onLbxQ9UMs+i5yNvVtwTCC6rqOxsfEgAB\/3RttEUUR5eXmpdU06w+l2Wztth6ZpaGpqOhXACx1pARzIsnxIOBx+v7PN0yYX8ZaWlh1VVV3Unu27rdBsQyxACEEkEpksiuKOpWyoLMsilUo9mEgkLgmFQvB4PDBN8xHY0RUsy4JSilQqtSqTyTxlmuZ3yK1BmWXZcX6\/\/yKPx\/OnUrQX9ol\/YVNT07ZtzUDOnG2HHN8giuIFLMuGCSFseyftwtDMUuZmwYdSShVKacayrKRpmklKaZpSmqSUxi3LilJKo4ZhxC3L+gi5SIY8eXfMfO31fygU+tDr9R5ULAG2SUpjc3PzuHA43OLxeE4xDOO\/hX3kCFXHfFGsf4RNBjMtLS1jCSFrCwWxKIoIhULtzdUTAbzc1X1tjeT7qqoeVozWRxTFy8rLy+8pdg3b321IJBJ7pVKphZ2RQZdYbO7EIsAjmeFhUROjhwYxbdoM3H\/zBZg3+2cAgMRioEGhG1bvFqfqbVx765M4+fRz0FDfipdfehYvP3070smW3+19WJZFRUVFT6MketMEcp+maZf1VtvKysryJolewPkAHu9q4wSApqammwzDuLGjthYKe0opZFk+PxKJPN6ZULGdTmdFo9GdTNPMtkcuCsew8Dkcx4FlWfA8f7Df7\/+glP6wc4l8kkgkDqysrATLsndYlnWlIyxVVUVLS8t9pmle2ZFmJhAIPBkIBM4p9kTuELR4PP5\/6XT6YZZlf9PPbYWFpmmglHqQC18M2RolAb9GcjQEg8HLfD7f0aUI79bW1lcVRbkbubDctP3JIOf\/k0IuEqQorWBnxIIQUllRUTGfZdnyYsaHZVkoihKPx+MVlZWVEoDVlNKwoz1KpVItqVTqaUEQqkOh0Cml+HM4fRuLxf6i6\/oXheGs4XC4vTV1DYBbi+mDWCz2cyqV2hWdhOU6xALI+Vn4\/f67gsHg5cXOH3s\/UVtbW3dXFGVK4drc1ImFm8mkSJgUkFiCcg+BIPBYs3wRBgzujze+mYyd9joUAJA1UbOxk4ob7vg3Lr\/mHFAKhCNhXHD5pXjgxQXYYp8bwUoh8DwDUfZ1+pE9vl5NguNEgPRggVWgl2qBJJPJRZqmXdNbbfP5fOB5vrdIxRldkQrnRJxOp+cYhnFbsQIUABRFeSKTybzjnDLbg2EY4DhuYiAQeLBQPe98HHt923s7URx2X\/xiGEZdKXPIvs8wQRDA8\/yJpmle6ai0s9ksmpqazjBN87KOSAUhBIlE4lxFUWa2JQhdCTZRFE90SETbyJoOSF0GuZDEKQC+BfC5rf16X5blX7xe78pS5rr9rHnIhcJOwq\/5RmqRy\/nQ48nF8zw8Hg94nm80DOPbUqIuKKWmIAgcwzD3FZKK1tbWBbFYbHvDMK7IZDKntrS0XNQeGeuq7ZZl+RzzlhNd1CacFQCuLYZUOPMllUpdgC5yfThj7BDAZDJ5haqq09rTVHUyZ8VwOPy11+udUOz3NgW4mTeLgGUBYR+DrG6O+ma6fsR+O\/ufF3imcWVtI4aO7IdzzzwRk795f6Nvx413PIlLrzwHixapME0DhkkRrwMkqQxj9r8ahx93NrYZbGBpAyBw7S9+VScYN1TET9+9jw\/efRWLZ34JUZKQzWa79U69EAEC9GIUSDKZvBi5Qmm9Qph8Pl9v+VUcAOCZYk6QpmkinU7fD6Coo1WhuSKVSt0kSdIRneSmgGEYkGX5XE3TvkylUm+2RxB4ns+HoXIch8IIBIZhmuyTbUnJyxiGifM8vzel9DFHSBiGgWg0+ncAzxUjJBRFeVQUxWeKX\/sWOI6byDDMGNM0F7dn2iiGqDAMA6\/X6yRF85ZqBrG1Hh0Smp7A6\/XC6\/Xmx4cQUlMiEV4tCMIhhJCznbWUSCRWpdPpfZBLLgU77PWRVCo1xu\/3\/6MUrZFlWevliZBlua12828Abin2ZVOp1H8ATC+WcBeuj0QicWN5efmHxT7LJuLecDj8QTQa\/ZOiKNHNITOpSyyKIBUhHwOPTP3XPJV88\/sv1K2+WkgvP3yied2O473\/DnlAE1kDwwd6oVle1Nc3w7TD+SilsDYSU9ONdz6JS6\/IkQrDMMAwBMSupapkEmipT8E3MIKqAT40GRbEDvJ5pRWguorguLPPxITdj4WXAkjNw7P\/fRlzfnkf62pqQBgCWsTG1AsRIABwjH2S777azh6reDx+H4DPemVhcVx+s+4F9EculLKotqTT6WWmab5RjGajrVA0TXO2qqrvSpJ0eGenakopvF7vPdls9nMAiUKB6whbj8eTF84O6SnYsNeVpDHMhZiOEgThFcuyQs7m3NLS8iil9InO+qNQ22Ca5veWZamEELEYAW1ZFliWFQkhW1uWtbiz8e7ofrZfCURRdOa61I08DHpvTKRCXw0AkCQJPp8vb2Kw36u5WPJiE69+lNJ7TdMEz\/PIZrNIJBJ\/c0hFoZBOJBKXSZL0V5Zlh3eltbH9NzTDMJY5hIpl2bbrajt04m\/U9n6qqiKbzT5ayt5QCE3TPspms19LkrR3MQcGx7eEEDLM4\/E8oyjK4ZtgevrNg1j4\/b2T05thgBAL1LeowSsej\/44aSrdwjdWwC9T4mW\/\/Cw+vu3W3A2XnoGbPV72SY8omKOGDsOwof1gmhZ4nkMikUZLaxIc9\/uk86aUoqmhFv+87lFcUkAq2vX6J0BWySCVsJDJGDA70FgoWQuppIR4o4VkgqCs0ofxW+yE8tE7IhW\/AdkMg2\/efxn\/eexK6JrSqeq1FzQVFQAe7g0SEI\/HF2madm1v9X0wGOxJgq+2eAi57IdFjXk2m30PHUSzcBwHj8eDbDbbriMdIQSqqr4nSdLhXQl6juOG+ny+S9Pp9A1tCYplWchms3ly0c6G21z6emQizr0FQUAikZir6\/oVXY2tY4u3tSbLDMOYx\/P8dqWc\/FmWHd2eoOkqwoMQkq\/v4RBoQoivG2tZKxTQPSHRTrSQLMuIRCLtheO2FvscWyNVBTvU1ybo9yCXJv03AtqyrGwikbghEom82JX2hWEYZDKZzwAsc67zer1t19XTxcoxQggURfkIucixLuFEE7V9x2w2+4woinuX0u+2lu8wr9d7qqIo\/y3WHOcSi40IdfW9U9WaYyl8MrinPiv7YdJ0YQtvVQ1EYkKq5qBZFDOmG1VXpPDYyOz0LRsbW8+PKSvAskzBgmMhihx+DwdZlmXR1NgA2ePFYUcfibpadEgqurtBmbqKbDaBREzEimUZDBwSQlmEx9\/\/dRGmz\/wQv3z7RYebfQ9rgDi4C71nAvkncvUjeoHY+iGKYm+Rir8h55ha3JiYJjRN+6qjvzsnZ6\/Xi0wmA13X19Na2JqM2cX4AFiWBVEU\/6Eoyn8sy6ppq7WwT\/vtzjlKaaLUsS90AtU0DYlE4vKOCBQhBF6vF4UnXeedKaUrUWIiLUEQ+ndWYKs9zVQhqWgzF7qTgTPbW+uWEAJJksCyLJLJJNrWYGFZtlWWZZRALogzLplMpkHX9bvb6wvn+YqivJTJZA7w+XwnaZrWUX9DURSk0+k7C\/c0WZYLTSBXAphYLKmwLAuapr1XzLUOoWi7himlUFX1PdM06xiG6VeKRtI0Tfh8vlt1XX8bQHJT1lpsksTioH26n3yPUgsejwROkAFqQsumjTRGf7Tljjdv2SjuiNbGJGS6DqbFoWLiSIQbHkv\/8NG9r5kAkGza6Pri0mseQiBYjZZots\/UbwQEIBRZJQ2qetDawEKSAiivCCPaHFtvg3LCSnuhTsbR6EFoaeEpKh6PP4Bc3HvPF5RtAuklMukBcEPR40AIdF1vsizrN\/UuJEnKa1FUVc3b\/O3Ntu3muYZSuo5hmAGdtcNWg5cJgnBmMpm8qS1BUVUViqLkQ0HbkJdkZ+aDrtqZSqX+B6DDzJiyLMPj8fxG4NvPXtONPBLhwjwSHZG6Qrt8J5VIxdL3Jdpjvx9ZlvMJpZy+b9sPNrHodqZZRVFeAdDcnlBdTyXS2noKgOE+n2+nwuRTjnlOURREo9F\/IOesmtdWFGStrbaJRdFrXdM0quv6pGLmV2dh74ZhpFVVfc\/r9Z5XCrGw09MPlCTpgnQ6fcemrLXYJIkFw3RfgDKshGhjM5RkDJ5QCBYjItP0xVV84xePDNrhoocqR1xz9JrkWDAsMMJ4D4s\/v+BgM+f5vdHh\/677N26++VwsWKQ6dr4N9mw1m4UvEIA\/WI5Vy5c54YwIBoO9QSp6JQrEDiVcqmna1b3V7l42gZyFXEXOogWuYRiLUWDbBnKRKaFQCKZp5ueBk2nTsQEXarMopUmO45LFahFEUTw+nU7fTgjR254QFUX5jf+BbcpI8zxfMrFwkjtlMpmHOhMifr8fHMe1KxwopQ2l5FOw+0tWFKXT7zj9yjAMwuFwZ+XNuVLG1O6jHmssfD4fBEEoZu1lSh0XhmFgGAZUVX23WDnb2tq6l6qqj3o8nrMckm8YBjKZzOJ0On1JIdkvJEU2LkSuoFgpa2MegPm9sr+p6scej+e8Ur9n5+A4J5VK3WMYhrGpai02SWLxyY\/Tu\/U9niNgeD\/ufHQqvvvgIcRWvQddSYDhOESzRi0z+\/FjvMte2rF6wr1P+ivHbbXi\/ZPObNU3LlLBsjx23P8s7HTEldhzp8FYtULrVRNIKchmFZRXlmHoiBFItLRAtNMJ90Lcdm\/WAtlYTSAAcHap7TJNc3bhZh8IBODxeDosAuYQPmfz\/VX2W1YxwsV22BsrCMI+uq5\/WmgqcLQiHYTb6t1xbLXt5J8A+KUzIZfJZNolFfapscXj8ZRKagSnvzp7t0AgAEmS8uS5g3XHdmPO9miO2qGkxTpKl6ymZxgGqqrWUEpnlPA1NZPJnJ3JZG4HsLUtj9YhF7GhFZLJUCiEgv73IVcArCTouj6v2DnWVsvWjnbqB9M0Y4SQUCnzyCbVQ3meP1xV1TddjcUfCBVV3av7I\/CAYZiIDNoJ2x23M4KZHzD7q\/uwYPp70BQgmhbRGE\/\/7Ks9Y9dmid8qmtCnbkzt3uWgv2OfYy7H8C2GoLEBaKpNY9AQ\/G4eyAQEpmEWLsbeuO1R6IUoEACIx+OPA\/iwN17KMTX0MMKlEAcgV\/K8VGKxBvjVj6UYYVKYltrGYPtT1DMZhgHP83tls9lP226iTvXTduZgyR3laFey2exbXWmiOtFWgGXZdHf4aDHaFDuctKtooO7owLM9nfMdka12xrNVkqSSQ1t1XZ+J7hXsW2l\/OtQCOvPJxsHIRUqVqi1YWWxfdTR\/Cu4VMwzjR1EUD+7OvibL8oGGYby5qZpDNklikUoq3dZYWJaFTCyGVKuArbbeDVtu8SeY6gosmvIefKKF9954GmtWrUoSQ\/9pY2nvqJEjsedJD2LnQw+CEgPqVqaQyhqorOJACFvMnthnsKgFluXA2CeAHpKcXkuElUgkVqqqekXvaIlYBAKBoohTCZv10aW8g3NfXdfXAEAkEgHLst0lOkfap8Kinmv3wQ6OBqMQdibK9tpsdOdUnM1mY4ZhfN7Fpu2k\/O7oEq0b2pKiOrLIlM\/dSWSg92S+dyUo25ALBYCCXJbPokmtrutLe3v\/8Hg8kGW5rRbwoFLXhk32FhdzvWEYXa5l2zdphiRJB3dD+wSe5\/e1LIs3TVPHJgg3j0W7M5EBYCDWXAfWJ2LwkJH40wVXYeJI4Ni\/nYcj95uAdfUbR4LNLSdui4++\/Amfz5ewYlEKHsHM6Qo2EtsdtSxwPA+W46AXVInsJu5CB6XBSyEBdkTBFeiFcuhOMaRiM4cWSSw4ALuWunkahgGe55dHIpF8Ma5SDlEAhgI4FrkshiVtlCzLDmYYxs8wTLJw8+1EpWyV+gzbOfUndFGW2vEl6aT9eqnzkFLamwKAK7XtPXm+x+PprApou8SLUpqllMrFzj07CmhZb+8f7ThCywB2K\/mAkyNV9R1FKRX2tSAIEAShUyJma3ZmdUdbYYc+D+I4bkvTNGdgE8QmSSy6m5SKMAQCRyAKBDwHSAIDgTVAtRa01nOIVZajul8EgpRz6pYEBr+X\/FZVCxaA5196GZVlEpYubYbkEexFvjGRtPxpoacl449CD6NAHG\/vRCLxHHpYV8RBOBwu9FTv8vnORtRFEao\/AxhT6mZFCLHC4fCThJC0YRgMIcRELm2xZX8K\/80C4O2N2odcbYtu2RDtTTYsCEKYEPIbYtGR\/O+ORkZV1Z+7uq6IaBOj1PYBMFiW7TTc1CFRXRFHQkh39t1uEQuO4\/In\/hLMGjohRC21j+yS410K7mIRDAYLk4o5GAVgSHc0FoSQRFfEwhnLrjIJ22R6oSzLJZuMnPBnlmXH6LruEos\/TKO6GRVimQAPwmYy1vGJNALxNGkiFgwhYSnUsvS6KAzTsGI8x8wRCBD0\/z72MUKALGchowKKyaFFATh2I\/UuphSEYcALArKG0V1yUY5eSoSVSqXWZbPZXjGB+P3+zjz\/O9y0TNOEZDuydoDx3XkfhmEYSuk2GzoCyIZAKRVKECK0tDlPHC3ElM6uc1KJd3GSJKVNYQpCiCEIQofEotjU3vazS9ZYsCyrdyW0f8OeDAMej6c7\/k0aSvDpcLRlLMvGO+sDW+NU1LtIktRRAr0J3SW\/uq4nuzLHWpYFSZIgimIxpqO1lmXVMwxTsiO5fcgZjU0UmySxGBKSS7qeIYBJLTQ1Gbj5uZbbnvwgeYUc4DBjSU6IEwCwNAiVlRiqvrO4YfWqLSkDPZH6farSEQAZFfjTDjtgwMAhUDIb93gwhIDnBWRpuru3uAPdcNZqI3RhGAbi8fjVAHqccMTv9yMQCJREKhyNSTqdzmeE7ED4btXdzdNJ7lPKO\/XkWkdDoKpqVFXVaNskWQDyKaN7ItztqIO4aZqLO3oX5xlFCISSSQ26iGLpLHlW26agRB8Lm1gYpRSxssOAIcsyuulPopXaP7qux3pLY+Hz+Tq6flh3hDilVLcsqyiyVGxWYEppGrkolupu7knVyGkNNzk\/i00zj0U3DmssYfDd7PTpT7wUvYKrFCDyFkwTsCw7Hp\/2xyBlDVZ+dd5zcT03EXTT+t3aOGLslnjz428RDPJYXZPa6MfEtMzuJo06HLl8Dj0Cy7KIRqNvUEpf6Om9uhsB4ggfwzCgaVq7CZzsjXBwd96rvQROHfV520iQdiJDumyL\/dEsy9ISicT9KCEVdHfaZprmOnsj77JdRXDzUtFbMcQsSowKcXwsSg1rdLJsdsNp2ihV2FmWpViW1SsbUSeJxUAI6a6PlWMK7HKO2Pk4utSs2E6Y9d0tKsYwTBhAqDcOOi6x2EixpAGHnvOg91mUj4C3HDBMCouoMLUMNIvBkGEBBOf8\/fM5TdG7Nob3vfaaqzA4ImFRXQYss3EnWbEoBc8LYG3bdwmbXAQ9NIE4zliZTCaqKMq\/etoWWZbh9\/t7HDqbzWbz+SPaQcnEws5WuCKRSPyXYRjOPpUb9mZqUEpN59+UUuf3+f93\/l5wnYX2fTOo\/dNATl2eAdAAIN7ee3k8nl7L5WBrK3pDwJf8bMuyOtVYOIK8tzUWdt\/RUpMp2ap\/pFKly3rLsiyv16uVEkliazh6nB20rKwMkiR1lnunqrtbQbGaKtM0oapql223\/WpiPQillwF4XWLxB8FJ\/3i6pOsDHuDHOeopsjkUW2\/ZD81NGuIZClYKIFhVCeqpgFjzv+z8yS9fujG07\/7Hn8VpJ5+AhbVZ8ByTzxWxsaIHkSF3ABjUowluO1bGYrEbAKzuKakIhULrOWF286QCVVWhaRokSWp7LwFFhnq2J3hN07y5l\/KF9BiCILTXvm4TRMuyahwS1dFG7+TM6OJUWjITtyxL76wdReSuKCQWpRIbs9SoEKf9PM93q68JIVaJDokKSjCfdEQqZFnuShPI9+ARRY27JElFmzkppckezO+8FsUlFn8AvPJ4KQkLvbY2KnmSV0jcNPcnVIosKM+Dgej1KsHBQyVPaOTylQu\/VoF5v3fb7n30aVxy\/ulY0qTZ85L5Q4xJN1TkBwM4p6fPJYQgmUx+aVnWYz25j9\/vRygUgq7rvVUKHZlMBoIgtO0bgRDCd7OtG9V67kRb0S3hbhhGXWdzyfErKIK4disqo7OIjxLmd3d8LAzLskoKkXWiVBytWKnrL5d4lZYy94yeaJMcTUUvJphrS5Q4hmGEYpw3neJjRYaPx7rrKG2aZhwdaPpcYrER4uZ7utZYeD0CVtdm8L9X30HTmvmAaappDXPXvyoNNCzcKNpU1m8sbrvnEZx70r5Y0qTB1A38kfLME4aBIEnQ1aK0pUH0MBGWYwJRFCWdTqcv7impCAQC6KgSY3eRzWbz5asLyAprWRbzR1+DRWgriiZPBXkSWpzNv5PNuphbdscUojkVW3uosSDdOA2Y3RHaTgRSqeGQ3SR+jqms5HkSCATWKytfBIHpFunmOE4uhliU6DOR7cEeFQWQcInFHwTXXXZmUdctrgfWMX8FaZ2G+T+\/gIXTchV1\/7Ln7jj5jHPx7H9fwbdffQSW42EaG95xd5vtdsCu+x6F3fY+CFLFSIwfI2BFUxambuGPVryGwK6CWhzuQC5ZU7fhJKyKxWI3oZuFhziOg5NsqhfqfwQJIcdYljUHwBRns0+lUjAMIy+UKKW6x+MxOqtV0JHwRffKcfeZtqKLXB3dSRLVW1npulOro7dU1kXb+gtIlVnq8x0B2lmVzq4EcalalVKJhd\/vRzAYhGEYRa8vSmm8G8nNnD3BW0wOixLTbNNu9K2Tfn8pNlFsksQioXU91gGBoLk1A8KGsOv+R2L3PfZB\/2AMPy60sNMWPhy7dwUm7Ho0vp\/Wgo9evBbzp30NThDBMH2bu8I0TXA0iQn7XYlzL7oAfxoDrGsClq7UsWpZFsP7U\/wRK+LRX1dVV5fuD+D8nmorWJZFPB6faprmPd25hyzLCAQCRWfULEID8y2ldCLDMCrDMNuZpjnfSbnt1CawhafSnVOQHXHiRy6dhdV2s9zQ2gpZlrvqt5IqfNoq6uZiru2svHkP9r3eigoh3dAGdMsWL8syGIZxkkOVaq4pqY9INzYlXdehaVrR68ue4+uKSID22wblSG5Q1\/UuNRZORd5ip3t3iIWdk8UlFpsiCAgMLYXGdQr6l4kYM2YIVqctePy5id4vIGDixCr89EkEEybuBW8giL5Oa6nrJioCJnY\/\/EjEk8C6tSm0ZkzoOgeG4fFH9fWhlgVeFMHxPExdB2lf3ehDL0SB8DyPbDaLZDJ5WXfu4fhTFGtnLQL3A5hob4wigJ0ppfMde67H4yk0G1AADZTS8aW2m2XZiCAIYYZhoutJxBJOhKVukG1PhUAuDXNf+DlQSnsrY0t3fFiMtu3s6GRchNAu2XmzFGJjWdZ69VK60Bx1pNEpNSSWRYkmHsdfqdj3swljTXcPGpTSfsWsA1VV4ff7i3ovQoi\/m8QiY5rmIpdY\/IFgdTnRcj8jPgYVIRYBLydmFTW8ck1sWKzFrJzeavVfWyeMmbQQFabF7Lp2yZzTo3UrvxbkYN8SHYZBvLUFkSCHrQ+8DBG\/bhcR++M7DudVsyCgHR\/ZbgPQo2x0zmaQSCTuBvB9qSc8n88Hnud705\/iINjVWJ3To2EYawsFkZPXwiEaHMetYFl2r26kCR5gmmY\/TdOifT2ekiTB5\/NBEAQkk0koSq7wH8\/zxZaOl0t0RjQFQdC6Sr7k9HEXfSd0Q53em8yMlvhsvdjnO+vM7\/fntRQsyyKVSoFl2WIzSrIbQjZYloVMJlPqHF\/gJM8qVZizLDvKWYedvZOT\/6PIORLuzh6ladrPsHOyuMTiDwJvF61y8j58MTV1+RfTM2dP8zKeaMqqzmgpxjCAbNxCtlUBV7kVwumHW5t\/+Wzlhiy\/cf2N\/8bAccOwfEUUGOj5Q\/Q5pTkNUFmAgeBjwXIsKGF+1UyQLj0sdgdwUY+PojyPeDy+VNO0G0pZ6MFgMJ+wqhfDNcMAHit8jqIoyyzLWo\/wOOpgxzlQFMVZHo+n5PoDDMMQjuO2oJTO66ymRXdNIyzL5tOYF6qjOY6DKIp5UqfrejH1OrylagwIIUYvmQGl7moseusM0Y1nF\/38YDCYd4Ys9LNQVRWSVFTTu6NVKVlj4czbUpKyAVhk+1kES10fPM8PcTLedqXdKAG+7rQ5m81+hU0YmySxIHrnZwVGAqYuyu510R1Nd4FhsMpDwPEMCACBB6QQYIUGY3RVDeIf3XgxBVZuqHff\/k874Owzz8UbPxvYWPIRdLpIrJzbRL8Ii+oKlkyeqx4+c376olQyez1P9R9M5+RPCEApKG3X8ZRHL5hA7NTSTuXSovwUWJZFKBQqJn6+O3gGbQomqar6CXJJpdYjFk6f2EJ\/ttfrLX3eEwJRFHcyDOPV9ohFm2d0eh+nT2VZBsdx+YqPTjKgwmJqhWTFsqw8sehl4W515cBYgqCRS51blFK1q2cU+XwnwVgp48oVI+gds1o7ZcbzuVOcseliDpRsCunmd9abb8VcZ5pm1DCMH0VRPKiU\/dHWWIztyrxZYDYpakwJISWl83b2KE3T3nOJxR8Mc1d2TO4FjiDoJ\/xl99Y\/AsNC+QgehkZgUQIKFrrFQqNB9Bvig7j4qslr61pf2FDvPWaLifjk658AAPF4EmQjzajpuLVLIsHACg5+mfimLNBO+\/pV5eIfZmJEgKMYkG4ZwRiJHwyFy\/MKXTdhmkx7G8mtALbuyTs56st4PP4sgHeK+Y4TRuqcsnsZ9wM4ovD97FTBn7ZHbgo3M8uyJhuGsYhl2bGlahc4jtvNcdbrjEyxLAtJkpDJZGAYRr4KplOEydE4cByXJxPFaDucdjr37GRjLumkRyntMrFCCcSiO2rALm1jTp2WLt5Dp5SWamdjCCFMV06HPM8jFAq1awpyvpvJZPLX9KbGwiY\/JddAKWKe\/FZ9YxjfiaJ4UEmsNBftMYZl2UGU0rUd9WWJphAPSoxeYxgGmUzmPXQzUs0lFr8jBgziO9hQgTIJuOih7F3fTyubEBg\/FAYFJD8gcgDVVfj4FDJKCuH6T7Hix39fsyHf+9prrkS5j0VL1vp90nTbzg8Clysf3x6yDEHExyISZrC2Ud3iv58nLv12VvbYJcs0DzUpmLIw+lVlYK6qjSZaNfByU\/7mhA+AcHJOzVGgpAFweY8ncq5yaa2qqld2eVwt8KVwTBC9jKsAXNJ2Q1EUZUVbM0gHm5uh6\/oXPM+PLaVSqW1G2UYUxV01TfuxPa2F09ZAIJA\/3TqbqaNlcARTgfd6ydojwzAgCEJnAqwkYmEL1i6DD4qMCpFLeK7TJrWYdmua1pVWQ+F5Pl2iQyWHTqIPnFN2MBjs0rSQyWTg8Xi60lqUHBViv1+35Ekp5i2GYaDr+puU0rsIIaTYPrSJl4fjuO1VVV3b2bUlzPfBAIquXcKyLDRNQyaTeRybODZJYjFtYfsTQ+QZaAZ2+XbGuksilWtQrcZ1VlvXklgxb6VI08lEa82ShFHTGF27tGaViUWEYSbxPAfah5Eghp0f45Enn8fJxx+HFc0GyoO\/T34kQnKfaMKAplpg2iE3lgV8Pyc9ceoS7bEPJmV2TkYNQGAQqOQgMBRpM+ecSamZpBZALdPe\/ABG4NozLj\/Y0\/dmWdapXHoDOsm7z7JsXqD2si9FIa6xNTC\/gaqqXwBItbfpFc4x26ntFVmWLyxFADkCRhCEv2Wz2R\/bfs\/5dzgchiAIUFXVURE7J8Femke\/EpKOwhwJIZFST+1dnaJLsNd3x8eiS2JhWRbS6XSX1\/j9\/mSxeUpsgicwDCN2VNHVsiwEAoGiM1cWobXojlmD6448sZ2ZS9pjNU1bKUnS2x6P56hSNI2EEAiCsLuqqu90ZKqzLKuUUNM\/laqtiMVinwD43CUWf0Ac85cxHU0tmJQ0+7jmy1ildc7yNFabQNzIFVH6ddfhgFPPvBAZRKAmakH6MHdFQ30DjjzyMFxwzqlYEzP7PJy1M\/A8QWsrsHC1itHDWFDK\/uZ1ykMsvv4lfdwHb6d25geLKBvAAxSwKOAUe7UsAgKWz0XsMwC1QFg+14\/r3\/BKALv09L2dBUsp7TDlqmP26E0B2g4eRzs5OBznOU3Tvu5IeLS9XtO0n1VV\/ViSpAO7ir1ve9ryeDwnp9Ppu03TXF7oLwHkojkkSSpMyNXj7gdgMQyznre942shCB0etEOl8keGYdiO+sEJM3ZO4p21ixAil9rIYjQWjhNwEXb5aCkmLoZhvDzP+zsShF6vF6IoFm3OK0Jr0R1TSLciSbqjEQOAdDr9mCzLR5WqSRNF8YB0On1JZ0RHkqRi89f8udjnCoKAbDaLTCZzCzYDbJLEItO6vLM\/L1aBxfndiuMAw8AWE3fDlhN3w\/DRE7Hlnw\/BwftI+Oyn6Xjx0VdQUVXeNxoChoGmc2AEHioAQ7fwe+e+UnWKsFfAn8cDDFVA6Pqxcf3LgLomyn5QLsHvyWkw1iMnHA9Ly6C5JZlM6ABjWrAswOMVEOI4mL8K9dEAburJuzrCJJPJpDOZTLs5KwqzZ\/aR2QPIqYE\/APCXjjQliqI0mqb5XSltS6VS94qieGCpNSJ4nvcEAoHLW1tbz3WEvbNhFqMuL5aHAniGEHI8gNNUVX2lLbGwTTMd9VdJ3qmEEM40TbEj\/5HCUNMivPrLS51n6EHq5nbut7JYTZSthSKmaVa0RxwEQYDP5ys50iedTiMYDHZGFplS+ocQwrMsKzvEuC15cIhne212iH4p81xV1W8ymczbXq\/3SK3Iwob22hgrCMJ+hmF80dZUaJNyeL3eYkNy9y9Wo0opRTwefwDAZJdY\/EFx3j+uXb+RDAGVQpg86XPM+OkzAMCYLXbF6HG7oHrM1hi61QH48wgO207wY+U6kNmL1V1veAlXL5m0OLZ02qsnrA4N7fE7MQyDrKLA0HXwggAKCkIY1K2rxXHHHwwL+N1JBQXAcQSWpWPOUh5lgTBENo10MgPG3qyVJNDUQgeAoQAl7bElgKEwLSuTW8y2FkiUQNdfrLehG1nr2i5Yy7IQj8dvBrCg7d\/8fn++CFMfRthMBPAGgJGdXaRp2iS00Yx1pLFw5ouqqt8oivK81+s9rdjNkxACwzDg8XjO0XX9g1Qq9SHLsvB6vXAiTXqBVIQAfEIp3dE2pVxuGMYr7bWhA1NIECXE\/zukwTRNb1faJlmWIQhCV+Md6ZP1U5yPBViWXdSJJqe968Gy7Ghd179uG7ETDAaLydvxGzgkpQNhX5LGwiYWYnu1OEzTzOc7yWQy7WrnCCHQdb3kNiQSicslSdqP4zh\/MevbqX4rSdLfYrHYF4UE1DEpOYXziiAWewAYVZSQ5Ti0trZO03X9X9hMsEkSi3seWF\/bJHNAgwb8Mu9szJnRgqoygpFDymGyHjQpgMhbiCW0Le59pvmEr+amT567khvMIgh+7l0Pt9bWAqjts3fdcustcdDB+yGe2Ug6jwKEUITDFVg880fIQR+CkRHQlYy9EREkFaMaJJuLxqe\/vQG1GBAwXOHCauOrciyAo3v6qizLIhaLTTdN8+62wiUQCIDn+T6plliAS5CL\/uhU0FuW1e249WQyea0gCIdyHBcphRxZlgWfz\/dvVVW3tiwr6mzgvUAqtgPwLoCBzj2z2WxNZ0KnnWdWEEIqS9RYgBAyoIPf59tc5KnX341ne4rp82Qy2Wkf21qc2aWUk7dJxL66rv\/bIWterzefk6IPUrZ3p1AaYRhmvVochmHkyY+TZbPt+Dhax0KyUyxM01ze2tp6cVlZ2TPFzG3H90eW5ZNTqdQdhmEsdIgVpTS\/ZxQ5LkUVpBIEAalUSkmlUqdhEy2RvtkQi2VL19daihxBXVKHqgBDRgzGoHKCAX4V305vGfPzsuwJq6Lm0bPmqxPizRbAGpAGj8cw9Zm1i2rnXNub7\/XQE2+AkX34\/P1XILEcVi6diRNOPArlMoNljTrYjaimpS9IsGTWp4gmszjk9PsQbV0HwnCgJkUqzapgmPZYBahFIAkaZZlfq7aJolhYyCsA4K6engx5noeqqkilUpcXEhjHMdGx8fcRJgB4HrmIli41VZqmWYZhfNvFia\/d7xqGsS4ej59fXl7+WmfVNdvZdMFx3IDy8vL3MpnM3rqua71AKs4G8KQteJxNM53JZK5q790dn5Z22ta\/1BMxwzDgeb6\/Y+owDAMMwyASiSCTyUBRFLAs+xvy1E6bywghFaU+mxBS1p5GLJvNQlVVFAqozhwzbeE21zCMFSzLDi9mPG0ychjP8+MMw1hYmK67hDTipbAPrlRtom2G8jsOuw6pCAQCXYYpO6Gy3SEX2Wz22VQq9adAIHBeMdly7WeRQCBweUtLy+lORJTf74ff7y+WVGwN4MRiSIWiKGhtbT0Bm3h4aXsTbpOHZQEeiUVFiMJQUkM\/mdR88TXPNE++5qXWRS99nL7hu5+UCRmLINKfQIpEMCSkIT3\/gUd1INlb7\/DySy\/iovOORjqjwOsJwOv1IxTwImMQKMBGRSpyGwXAMCymf\/UYFi2rx7zVPOYsUzFrqYpYwgTLtZ9Jk1IGoqhnWNbMRz8UOgsCuAE9rFzqbOLxePxBAF87Sa4qKiryBKaPCm8NB\/AigHnFkApHkOi6Psf+TqcbXnsfe\/N8vbW19VZHcBb7XHuT30WSpEksyw7sqmR0JxgK4EsATzmkgud5Z9P8G4C5bcensrKys\/TR47vzEjzPb+mEssqyjIqKivwzHHNA2zYWhp\/an342sSmJyHIcV+HkqeB5HpFIJE+cHOFe+FwnV0jbjx1xkDYM4\/tS\/CwYhuH8fv+DTrKyIklFBMBDlFKNZdkHu3pGwaeilEOnQ74A9DMMI2\/WkGW5aH+ewpwppSIej5+fTCbfFQShqPmt6zpkWT5NluW9nQOJUzSvSKJ2WxFzFaqqIhqNngVgk06GtdloLLLqr5PDtIB+YQapLAY+8Er8pWmL9D2a6w2YKgVXxiEYIaAWoJoCMqQakRE8\/PX\/rpm1bP6\/AYAXxB6pjw1dw2677YoTTzoZLRlAyaSha1kwlMvXh9hYa5V6fBFoqork0tdw4bn\/h\/p1NfDLwKPvqYap0Q7c7ygswjC0wGOkYLFPBPDPHk9ajkMikViuado1G8Ds4QGwD3L1Pg7vjnZFVdWve\/oS6XT6OpZlhwaDwZNLsUfb5GI7r9e7yLKsf1JKnyrhsaMAXA3gtLabZjabRTQaPQltkpE5pMKpt9LBRr9LN8d9R8uyOJZlDafQWTcifCaU+gU7THGipmkIBAIQRdGJ3GlXI+MkE+uMRGYymZckSTqtlGgfnuf\/4vV637Usq6t5GEDOTHcFpVS2NS5HALgCdtgsz\/Pr+RK0eY+tu9NHDMMMczSUzpo0DKOoFNkOIRRFEdlstuQ9NxaLHWFZ1tuBQOCIrvrfGYNAIPCiLMt\/0jSttosIpkL8E7n6P11qKqLR6DmU0mewGWKTJBZDBv7aLJ4jCPsIbrm9+eGPXkruwYzkEShnQECRNQUoTBUCYQHlnAqPOgN0wdstc769+xJB5hLHnnAxTCsCw1C69R6apoNlWTx2f64ERioFYCOlERal4BhA5Al4lsAjAZyQs+EGzSk4+M8AUAGAkv9+3TgcWRUg7G+tIYSA0Q0LZi74VJKkQme6G3r6nizLIp1O68lk8uRQKJTx+XwwTbOnpIIg50xYCaAKwCAA4wBsA2BHdKPQkLPZ2iaZn3tjjBKJxN8opWwwGDyhmM2zzabtJYQ8iVzyrhdsDcRiAI0Fl1YCGIFcGN0RyNVvIYWkgeM4pNNptLa2HkUpfbsjUmEYRkc+HRMAHFxq203ThCAIY30+31GyLL\/mRPl044R7QnfIoSAIB4qiOJzn+RXO+3T27K5Ov9ls9itVVb+UZXnfYh1z7T44zLKsVZTSOwB8DMBJ9uRHLq\/CMQBOAeBxTIaWZSEWi73ikApCCLoo5HVcd\/pIkqQ9VFVFJBJxElmVpCFzyIUkSd0iF4lE4khK6ROBQOA8JwNsZ8SCENJfkqTvdF3fjVJaX8QjLgJwX2eaVDtRn9na2nocgLewmWKTJBb9Krj1ZMaPs1J\/ef7D1iOEcQIEXoTOVcPrF1DBqxAy02Cu\/nxNbNkbH65au+AdHfhum+3+rL\/6\/i+YNWsR3nrjQ0TKy7r1HrphAZYBjuV\/FV8bCDmhRqHpFtqTuaYFeESCof04WJqFkI8Bz8Orm3RoVreCzXGM1A3MBTDzv\/99BUeecDombrM1sumW8rQq9gPXwabKEBDV1GFamsPebRzanRN\/ByrblkgkcrzX6z1HVVUBXVeLZO1rWOTCJAXkkiTJ9obstVlToDfHwI7siJmmObk3xpNhGCSTyRN1XV8ZiUSuLkVLU7BJDwVwvf1RkKuwqAIQkTMReDpS7VJK0dLSsjKdTh8HYGpnpKK9WwA4EsC96F5KbVBK4fV6nwIQMk3zTQDRNm3rDEPtZx9WMunO+XV4\/X7\/J6Zp\/sMmZV0S4K58C+Lx+GWiKP7CcZxYrCOnfb8hAP6NnN\/EauRMtoPRJjeIU4gsGo3+xzTNq5x5VFZW1pGTYgTAAwD26w7xkyRpL0LIc6ZpXk4pbeqO2a0n5IJhGKTT6fOz2eyscDj8uCAITGfJt2yfpZEej2eJZVmXU0r\/3cGth9tz54iO1qaTEyQajS7JZDJHo4150CUWmwB0KzeReDtz5O3PJW6AMRChAUH4oEPWZoFt+KJeWfH6O6tWz34zpeJHANqEcVvhqONOxtFnngJTxl4f\/VRzTO3qHy+Nx\/qVrLIghCCVSkMUpd+l5oeqWSgPixg\/QkBt1ETbw1XQx2LRSmWLW\/8bvT2RpRWrG8zQwhWpCtVKlTUnGXw2TwE37Y0bAcykABqbs2iKGkgndU1RBQM8aTeXF6UUYFmGEIYAuTwG9sK+rlc0K5YFWZarAPxfNpsFIWSjnYe2f8U8ADW9ec9sNntNU1PTpEAg8F9Zlst6kEVURidhsk5WTkIIFEVBPB5\/wjCMfwFIt93Qq6ur86TCOcmbpjmYUnoNIWSCrQHqUZinLXQCtgB4BMAiAD8SQq5zSEY7AuFi5EIDt+wJtbdPuKMZhvkCuaKEswG8Ril9tT0\/gmIEomEYs5uamk4oLy9\/u5umPAbAsPZIjS1krVgsdjGl9BHnb2VlZYVl7U+yyb6EXGrqLdGDEHA7V8pppmmeRCmdjVw4HQOg1R6zSaX4CDkVfhVFKZpgcBwHTdOebGpq+sLv97\/k8\/l2Kqx108Gc8rMs+wSl9AYAnwFYapPt\/rYWaJf25k5h1tpMJoN4PP6AaZpXANCxmWOTJBYpe2MLA\/jfz7j2k3nlO2+x5WKQmg9qkyve+nDtmhnvJDR8Z5\/Y0H\/IOJx+yX04+8S\/YnAFIv94rOXut37AmeqcdyclFr6nFJvh1TB+e3S+4B\/no6IshL7xJewYHonB8lodg8sBj8wg28Zhulom+Hpm9rj\/PRk9BMMkEJkBTArCUBC5CmXaMkRrfsondBI9Ecj+augmIxhU4XL1Pkg7GwIDy1RNwzDyphBK6cWEkO17ffJyG\/f0te3w3\/XFvQ3D+CgajQ6XZfkmn893gSAInLO598Rx1dGMOJuxoihIp9MfqKp6I4AZ7bITO1eIoihtT5DPMQyzd6FQaCtY2hM0hb9rK7QL\/p+nlG7JsuyWoiiGM5nMCQXRIyCEyJZlfWJZ1uiO2ln4\/20zlLb3\/wX\/HgZgGCHkcFEUh1iWdVd7fgSF5co7PATp+jtNTU27BoPBd2RZrqCUdiuRW+G42VqK71RVPc8mX3lS4fP5nAqnp5qm+XxHxcqK+Xd7fWXPPR4Fzs22KelvhJBtVVWd2TaRWnu1XZzU2uXl5QgGg07V4lJ8alYkEomd0+n0UX6\/\/3ZZlkc7Wre2\/Vvw\/9UATi1GG+UkY1MUBalU6iNN067a3LUUmzyxuP66V3PEIuTD15OWb+tf9Nrk6PRf7qyLW5\/DzqDH8TL+cthxOOTQo7HH3gfBYME\/\/3H8qmfeb7pm7TKPMGRMPaTUW4\/FAehFzGW\/348ddtoTy5avAssyyGaz4DgeF\/8zlxPFohQb0hYS9jP4fmoKyQSDa06pwJJ1Sr72B8MAmmli8pzswRgooryaRa6kBwGoBeoNwJeavrw+qeZ9A1KqgZZkBomkwmZVi0EHWhjCsLC0ZJLQXERNc3MjeF7iJEns05orGyOpsNN4Ty+aDHo88Hg8SKfTvxHSHQjGRDabvSSbzd4nCMLfZVk+RRTFAYXRIx0JZufvbX\/a7wxVVZcpivKOYRgvoIuIFjtV8W9OgsFgsCkYDOa1KYWRB4UCpLMS1W2jOpw8Dm20QgOdfyuK4tSB0UVR1Ao0Zr8hCc7v2wqaQkFX+Nz2CIlpmtt0FQbsCKFOTvo\/tbS0DJck6TqPx3OhIAiyU\/Gz8D3bGzvnY5qmU+BqSiaTuRPtONWapolYLOYI81ZZlvMmrsJntDc+na3dwr7paIxUVYWqqv0ppTOLJb6FPjpO4rNEIvGbudYZTNN8KxaLvZVIJA7zeDznSZK0L5dDu6SxvQiftsTTrlLcnMlk3tJ1\/Qlbe+ViUycWj966nn\/WUQCoEzcqSxKOPOF8\/OmgS3DkfoMwKAA88n76jMffbrhn0UIjAs5CcMv+CCr\/q1uytv6DHEPlYJqds4sdd9oLl\/zrWjzz3\/\/B5\/VA1XRIooBgMOf3t6EV9qYJVEU4LF6Vxo\/TV2CnbUYgljBBCBDwMFjVoI2dvkzdAn4GVoGmxTCAsASYq6ZMzdokbOc9jkS\/wbtj+bIaULBUMyhlWNquKcQyDYBlre12\/CttSlqYO\/NzKIp6byKB75BzDlQ38unD9uJ9LAA\/FHOxk0iI4ziIooiGhoaiTmf2hlejqurVqqreRAjZXRCEv\/A8\/2ee50ezLFtdKBjbbqa2hkPVdX2NYRiLdF3\/2TCM75DzodCKm2vtm2ESicR5qqrGGYYZRSlttCwrallWjFKapJRmAGQopYpdRtwpJ07tj2W3T2YYJkQIiTAME2YYpowQEgTgI4R4DMOIapp2ZyHJsTUERjqdPlYQhGuQc8jV7WWYpZRGTdOMUkpbKKWtlmW1UkpTAAx73ASGYWRCiJ8QEiCEBBiG8RNCgnaiLJkQ4jMMo1HTtDt6g4QSQlLZbPYKRVHu4Xn+OEEQDhYEYRuWZavaCurCsTNNM6nr+qJsNvu9YRhvoYOU0ZRSJJPJwn+\/n8lkTuJ5\/gxKaRZAi2VZScuykpTShN0fCqU0QylVnTGyx6XwlMQxDOOx+yrMMEyEYZgwISQMwEsI4S3Lyqqq+jal9KO2c76srAzRaBSKovymjbIsO7lcYJomWJZFWVlZ3jxSSsI3y7LeS6VS76VSqYEcx+3P8\/xePM9vxXHcCJZlPW21JoUaGEopdF1v1nV9iWEY0zVN+wrA1+jFdAQusfjjgQLANtvvjMMPPxYTtjsY47cZgfoG4NPJib3e\/z7x+IdfpMeCYxCs5kFNiqBoIrPw9Q+yQPLQI0+C6CnHGy891G7SD8veiR5+9BWsrFuDunUrUVXVD6qqQRWFvix41SV4gUUikcQvP83HmGEj0BzTAQrI1Tx+npPZo6FW54L9hPXMNwbxgLdaoDV8+ZWTWNMb8IHzAmaMBUAiuqn7CWiHphDT0oiqp0i4fBgqqoegqW4V0MbZz4W9AG11r+No54QwOrkSdF2HoiidOrIVZNVUKaVfqKr6hS1cgwCGE0Kq7I0+QAjhc\/smVSmlrZTSZgB1yDkB9irpo5TGstnsuT28R0n+IwzD5O3euq4vVBTl5O48tzfyoLAsC0mSIIoiFEXpUgtlo9kwjMd0XX8snU77AYxlGKaaEFIOO8CbUqrZpKgRwAoU6cPj9EtBtNIruq6\/0tN2ltpXhBCEw+E8cSjmvs47O9olp6hgPB5HKhduV1TmTQA1pmk+YxjGM\/Z4DAQwhGGYCgBhu0AdSyk1ACQty2pBrmLyCrTvx+NicyEWHm8ulMo0dKiqirMuewonnXU29hwDrIoCP01PbvnmD\/GH3\/86vaeVAXyDeMicCSVrIOsdhRHSaiyb9+7bAHDXvS\/gqSfv6fy0KbKgFpBJq2A3okxX1KKoqqzEvPmvoqZuWwwcOgqZtAoiUnw\/O7MvTAKOyUWPOByMEcsgpH\/S6uqWfuv8Np7IoqkZiCcMWBbpZ5oMx7Dtb\/YMK0BLR9P1NXMUxpuAz+dFs3PEKdHRcmM2nRSqRjmOg9frhaqqyGazRX3XydBYUVGRJxWFFUcdLYPX64Usy0in08hkMkU7+NnPiAOY2UtFxzrth41xvH4vx16GYeDz+eDxePL2eMcBtkQkAUztDZLjqPBLSbLWV2jjQNqttjjk2yEo2WwWmqaVdE97jdQAqOmqj3spHb5LLP7I+OrnlbnJAAqTMkjQMDjLQG2DUXnr860Pvf5V+vhk1IRUxSNQZSGdNZFgBqC8vwdj+Vq0fHfKF0kNn5135fMYO4yprKmp9QNYXqilKKQPpkWhagY2xgAFluMQa2lB09olmDBuFDIxHYZCxflrzJ0gMm3s7xa8fhHa6klTYwqWOb+vHLkzmrNA2hBgWoBJjU5StlIQMDrD8qZlUYiCjLLyamhqCj5\/oGjHNNurHalUaqNb0F6vF4FAYL1YfVmWkUgkOiUWHMdBkiR4PB7oeo70dhQN4JABJ1zOSTgUjUbXO8H9ngLUUU07beiq\/Rs72nPgLBWiKCIYDEIQctpKR5j31KG2J+\/khG+KoohMJpPPMfJ7oLy8fD1S0d33cDRZTv+GQqH8HMxkMr0ylkAuZNdZey0tLZ064jrjJIoiJEnKj\/\/GHLnmEosSUFmdq4pMGEDigOWrkuLrX6ZueP875V+rl2scX86jYiiHbNZE3BqEysESys1lSMy4ds60Ga\/dBuCNl15\/DVvudWz4hHux6Ks55mQABxHkqsj0HzwOyXgzkvEmW5T+zpoJAAwBeJaAYwFKc1VKGYaAYQk4juD+R14HArtjYIUXk2e37jF\/hTpACrLr+UnoBosQq4HEp\/yYXywAvP33wPwlGtS0AZEHTygFYTp5GQIWBAwILMPU4fN7YUi5ZxW7yTqnPk3T8uaB35NgOIWfnMyLzsbmJGrSdb1Tlb3P50MgEMhvMg7BKlbN7xCMUCgEp4CV0zelhOP1lsBlGAYVFRX5BEyCICASicCyLKRSqbx6ekOOT0dOocVAkiREIhEnTXn3NKUeT74POtIsdUfgdXdsRVGEx+PJa8T8fj8EQUA2m+2O9qTPNBU9nbsOAbcLjMHvz9WYc4hGdzQjgiDA7\/c7UW1gWRaCIEBV1bxJqdBpV5IkhEKhfDQLIQSZTAaiKLoai00F6VTu1CTyBIxA5Bufi0376sv0eBJiUTaMh6FZiOvVqOjvR8RcAGvePYuWTn\/+llQWrwwZNBSX3PYUtt13vwOO+Mfa1xc3VfuHCpnaFptUlJdX4\/yrn8G91x2\/niztaxgmRdDDgeVMpFMmODa3QWkmIHBAwMdImgWRY2FSCrAMGJmHIfNWhvYbgGxqNngzhi2G+\/HxL+xOyRYTkQGFxILC4oKQzAa01vw8Kb8RMsCEgc0YMjIJS01hTQOYtMKD6YCFMywL3kppRrbFIvDAMHOJwnJ+ACgjhAy3LKvGVtP7AERYlvURQoZYlkVtm+YiSmm9U\/PDMQs4C9kxFciyvF7BJ2cxtyesHbV04bXpdDofL2\/nh8inoS68t+NI5vHk8jrZp5YAy7InA7BsR8Q9AEwH8HjbZ0cikfVqEXQVJdDZBur4EFiWlS+F7vP50NLSst4G2p53e1ebuCOcnWgBO9MjGCYX5VR4ygwGg+slw3L6ief5fFpmR8D7fL78SbmzUyqlFB6PJ59siGGY9b7X9j2dGg9OuWsAiMfjTkKr\/HxxIgrS6fR6J0inPwOBAAKBAFiW\/Y3Abc+h0KmH4WSVdWz\/kUgEnSVkKlYL0V69k\/bMWW3fzev15jOChsPhfB8ZhgFFUfKne5\/PB1EU8+Y1lmXh9XqhKEqnpjaWZfOhxQ65LPxOoYmP53mwLJsvlV5WVgZZlgvvLyFXx2QQIeTvAFb1+IBVUATOTtiVNyPG4\/F8vzo\/2\/6\/sybD4TC8Xi8sy3Lm3h2EkF0opRcBmFXY907hQyfKxFnbpRQMdInFHwQDwhwIAcIBDtc82XT7V5+kxvtH8WCohaRRgbLqAIYxtcCKa5as\/PmRq+JpvD1+7Aj84\/LHceKJf8ED79EHxh+w5GKYDIZspcNcW5MPtzvmoqfQf\/gYxJtrN2ibgkEffvnlZxy0Sxm2GzoKGT0nPD08g\/qYPui1z5p\/qGm1Bkb8TIxSgAKMbnDmkEo\/q8+aflLDmpmfxDIx1KQG4buZiYPAsiAMQM1fNROsVAYx\/UE029qUJxZ77nMYjtpvZ7Q21yDSjyKdZMWkQuD1dLB5EoAB1SzTAkcYJDJJtMSSTtn0ASzLPuHxeLZhGCZNKSUAfKqq5pm+I9AopT8DuJZS+lXb4lJOBIUTt+9suM6porW1Nb+oZVmGz+eDU6CoUODyPA+nqBPLsohGoyCEIBKJrEdmnLoQ0Wg0L\/AAqLquj\/J4PKfLshy0N7bhbYmFz+fLq0V7RTtVsGE5QlIQhN+k0XaIlCAIcEIXHfLkqJALzRYsy+Y3SKdfHSiKko9WcYRVRxk2nc2Y4zhEIhGnxkXeByWRSCASieTNJ877JpNJeDwe+Hy+vKB2NmvHHGanjYbf78\/7LRTmj3D8VDiOQzAYzH+H4ziwLAuPx5Pf9JPJZP46p1pqe8K7vLwckiTlVeAsy+ZNWI4ATSaTeQFayunbaXthLgeGYSDLcr4isDNupmnmfXh0XYfX60UoFFrvvT0eT76vHLOHU1emkEw5GiYnY6TP5wPDMHlylk6n14sgcdZRKBT6jbNlIBDIrzdHW1NInu2w47zZsOD7t1uWdY5tWnxJUZRdC\/vOITGlJn4rXB8OyfL5fFAUZb0x9Hg8+TF0+t0hWYVVTlmWPd+yrCttIv9RJpMZa1lW0iEiztwqHPvN0fSxWRCL5hYLgys4LFmr7vjYGy0Xo5zA4KsRKfNhKF0Fa8V1S1dOe+r2eDL7kiTA+MsRF+Dfj9yKcCQ45PCrmz767vvoBD7IQfSKsJQY+lVH4q3rgjjvn9fjiL8fgp8+WbTBDSChMPDxtF8QwjCU9xuFpqZc5suhAwg+\/CZ72rTv0kPQn0d9FLn849QA6xkHrf5DrP3m7WYAWFNnwLcMIxbVmVvBmyu+5sC0LPi9BOrySVPTBpplkYGiWggFw4iEPYi3hCFLLEwz66V6GgxhO1rZoIRlGY4DGNZWw2rQdQ0A5iCXOOeOYDB4pXOCb21tvcSyrGcAjAoEAvf5fL49TdPckef5LyVJOiuVSj1TeCJxTu2O+rNQqDnChmEYBIPB\/ObU3qnXEU6OQCr8flvThrMZFZygVU3TLrEs6w1Jkn6yN5NM2xOez+frcxNOYVIsR1g6hbKcPnY2O0eIOFEmqqrC6\/XmBXHb+xUKpMJ7FVPkyRGWuq7nN3BBEPLVbgtVyjzP52vKOB\/nb853HQ1N4Vg541pYtrzw34XtcSqMOgLB6YuCUzSLXORF0lngzlwr1IA47+Tk\/OgsD0dXQtDRejgFuArTQxeOG8dx+RwnlNL8vCpst0Pq2hv3jgigQyI1Tcu31dE46boOURTzGg7H5FD4\/jzPQ5KkfJ0MZ+wK38UJGS2M6qCU1kiS5Ky1\/sgl1dILTRHFVn\/tqo8L\/bocc2ZhPzjXBQIB6LqOlpaWPOljGKbR6\/VCEAQkk8kyy7IiAJLO\/Rzz5uasndhsiEVZiEHWMvB\/d9XeHG8ux6CdyhDKroS17NpVjbOeuqUupjwPwBJDI\/D000\/j6KP2xH\/eV06574Vlz69aapDAEAESZ6IpzaO6IgKaWpYdUiHhlGNPQGMcQiar7wmKSQA2mCGZF4CWhlV48j+fY8Luh2L1chU8z2BdFOIT77aciQoe5WE2n+FT1TlUDgTk2c8+DWDqHn89Hrvtvw2+\/LZpp9W1huj3r+9foVkSIkhDa\/r6cwOAoeZu5JUZVIcA9PeiupxFeZgMhJnuiFOAZRkQI6EpaQOwmsBzLPweHsmMnhe2PM9\/ZlnWlQUahEn2Zj4jmUzuz\/P8DEEQJtgb6O2ZTOZ90zSbCm3H7S3k9k6AnRXraq\/MduFm0\/Z3jnbDsaGKogie5+sopSlKqQ927gUHXq83T4A22DyxTREdPbNQq1GoASoos44elFdvt38L\/79wo3fGqSAnQ7uVMAvJQmH68s6ETmdpth2i4ZxonfsRQvYCcDtyRdjyyaMKiVbb9vS0nzweD\/x+\/3pRQR2NnUOAnPdyhHVH7S1ljArHodA\/xYlucfyc2ltvhf5CbX1bCjUIzlqwTZb3x+PxCMdx+6uqelkhqZAkCeFwuGQ\/mWJQmJ20LZx2GIYBTdMc0vNWJpO5iOO4s7PZ7E3IhWXn141jGnOxORCLMIf\/fY\/TP503bL\/x262BsPTW5TVTnritOan+F4A1YvR4XHHdQ5iwy74YUAH+pqeanr3j8eaT4eFQMUqEoaqIqWXoN6wCkdQ7mDJ9+rJ\/\/d\/Z2HJCP5z1GB788vPm82XBHKRoOWKxxRbbYeDAIBYsy\/RpuzQd4GkMWw0AqrwsqkIs3v4+deKMheoQXxUPM2\/WsEClwZASP2LN9Hf+AwBnnHwgtu8HvNpi7WHGTQhhrk2YaRh8diEa1874vvCZu\/\/lJEydr6IlGkV94\/+zd95hchTnun+rOkxPntksaXeVE4ggQOQoorHBgAUWGWOTTc42xoDhkGyyySIIJBAimCRAgBKSAAHKOWulXWnT5M7dVfeP6ZaHPSKY43PvNfTveeZB7M7sVKeqt74IrG9DApLwDQW\/OCgBOLMM2wKIaIC7QCQswWISQnLZJ84513osIjF\/IZYkyQIwE8DO3i6zThCEAxljb\/g7N39i\/b+NP0n69Qm8SVngnNMd+aMjkcgP7eHxb3GVfN9F\/39jAv\/fOrb\/5XFeBmAEACkWi9m+deR\/8zv9QM9\/5T75LmvEt7le\/lV6WgX\/HQt7KBQCpRT5fP4m27ZvikQi2wOQfZfcD73W33WM3\/V3K9O80+k0dF1HJpN52DCMh6PR6PaUVl\/8\/N9+vgNh8f+Qqatw\/nPvbHsi1XlPNrv00au3dpcFBQAM3\/lAvPbONAzvJ2HqAnXXI2\/c+uaaFW6\/SJ8QYgpDSXVBE8MwtI6DL7po07xPHj93971GfXnPA0\/iT08VXhr3HB07rC+yIQmm7on4Cy+5EjVpwDKLoFSEIMqQOIHLGJxvufFcxhFVKGSUu41SWv6vLFHUpQUSDblIxQjXbQJOgPpejXjmlQewYc0G9G\/uDzANL76fPw8OQUgiYC73rBVATb0McdWL75YczBs6fDecdMKZAEC+XGWORoj2cOVwhCIxiJkvlluqu1AWypU7BQHQDIq2jhIKOQ3c5ujOUgVE\/IasEALGACpIQigEQJZAwEDEEKpDUQDbd5tOjwmA+MLCi2Bv9H3snknVrLQC+AFp3kQVp5QOd113M+d863dMOiFBEHZ2XbcbwKYKn2gC5YZc7T1KO4uCIAxnZVb54\/ZN+xWm2v82m\/W0VgiC0EQI6eU4zhoAWX8S8\/zoCuc8xBgrcM6rCCEyykWrQAhROOcNALZyzs2KsVHOeSPK\/W46v2s+F0VxGOdccF13BcoVJnc46XpjGkoIkVzXXca9A\/TdEf7k3yMQNsQYE2zb1lBuYkXhVW0lhIic8z4AujjnqicOKec8xhhTOeeub9IXRRGiKMY5547runrPnXHPBYFSGqKU7uwF\/G78luueEARhKCFkY6Xlq0e1xcsBHOe67qJwOGyn02kYhgFKqShJUsS27RLnnBFCqgghJQCWV3QsjHKzrZ7CchCApOu6K9Gjadu\/uBCnBUEY4jjOWgDdfsyIKIqS67qydw799wqee4+JohgDUPJiGmRKqUkpHUgprXNdt8VzPWgAOryiaY0A2nu683Z0jwiCUC0IwmDbtlf597J3\/WTGmGLbdpFzTr2GcQWU495rPQHeLghCJBwOE1EUVZR7vlTrut4OgPtuhcr5wXt2GhzHWerd7\/73KYwxwXVdFUCIc04ZY7r3Wcl7PrrwHRUyRVHszzlPc86Xcs4t13URCoUgy3JYEARREIQi55yIolidyWSyjDFXUZSeMVsxURSHO47TzTlf\/0OF3I8F+mM8qGvOPkn\/\/Ik9b88tv795a7f5LADWNGAEnnnpY0x67xMM7Cvhr690X\/Hr67cuWrOO9Uv1l6CIFnJWEsnGQRimzEL7K81PLv3k8WH9B+0+7bX3Pw1f\/xyfffvdG8fKvUXE4oLNGFwAGLXv\/jj+l6fCtiARygcaWkGw9AL0YhaSwLe3DXc5QToKhCUX3vqPWDyOZUuXoS0HRCMSCKeIKQJMk2HKLPXphyaX1vxjtnoBIehdXwU01EcBAA8\/9zZaGDB5pj76gznGfqF6Edz7owQctliLFFuF7MoXxwHAUUcdiFgE+Me03KELV1sDpJTwtaZolk2QiACk9MU8rax34KKccZIrWdAtCs0iUC0Cw6EE3xLVL0oAY6aVzwPFooV8wYSmWXBdpzJi3umxw87HYjHf9HgYIeR4PyiqUCjM5pxP8a0VFQFd9ZTS5xhj3aqqzuCctwmCMJUx1n8HO5IwIeQOAO2apn3KOV9HCJkPYD9K6e8ppXkA20RRvMGbDGoBjAOwTdO0z23bXkAI6QTwAADp29IJd2CtuJwQstI0zZWapk0nhHQTQqYRQkZZloV8Po9isThYVdW53iTfwhhrI4Q0C4Lwa0KITindAGAjIeQE7++fRwgpUUo3AejgnL8ErypjT88IIeQGSuk2VVW\/tG37C0EQMpzzRwH02kGWwSgACzVNW1ksFmdyzj8TRfFhx3HO9zMINE3bXl\/EfxUKhahpmu9TStcAyHDOX\/Ou11mEEJVSuhFAqyAIF9m2jVwux4rF4i2MsU2U0iWEkJmWZTUVi0Xk8\/mTDMNYTildgHK1w7N8MeMHM3rX8y7OeZeqqnNc191AKV3AOR+1g4yKv7iu21UsFmfqur5SEIRxKEf5N3vC4iZRFDcCeMBxHITD4eE1NTVthBCLMTZDVdVoPp+\/mzHWSindzBhrtW17Z0EQLqGUZlBuO39fxbm8lVK6yTCMRYZhfEII6QLwOue8uadL6DvcOYMopa+5rttZLBZnAOiilL5GCElrmoZcLifquv4mpTQLYB6ldJ5hGEs1TTtH13Xe2dl5OSFkJec8VyqV3tE0DZ2dnUld19+jlG4hhGxgjL1CKf05IWSLIAjrCSFtAG5mjH1TWfvBgiC85bpue7FYnAYgQymdRAhJed1vo8Vi8VXOeSshpN113YWEkHpJkv5KCOkghGxjjJ2Wy+WaS6XSPMbYFgDdjuMsI4T08t08FYL9UErpAtM0N2ma9okgCAVCyK1AOTMrn89HTdOcSildSwjpdhznNdM0IYriuZTSEqV0PYBtAC7+hvN8FKV0ha7rqw3DmEcIyVBK7xIEIepZKprz+fx0QshWSuk227a3Msb2qGxCBmB3Qsj7nPNtpVJpJmNsNaW0FcClvlvpu16BsPgPYcnnb7yQL7T9CV4MxO33P4fXZy3B2WNHI9NtJM\/6c+vUa+\/tvD9vcNT1pbBNBiM8DEP7V6Nh45UtX40\/ZHRHx5YLLrrqEePvbyyou+y+\/Px77l5+QGJ4FEqovJt3vHXl0ssuQ10N8PZMdvpfJvdem+9c2W\/ZV1Pw8fsvYcTgGtTVpAG4kEVgyQYc395tHxyTdXBOEU+ksGzh59jash7xGCBSgl4JiunztJMffTZz7pxPzIHX\/K3r8TE3tbfc9RKWtLbrxwLAmjVL0CsMfDyfnaflGeLhil4fLkNVdRJs4\/jPtnSobwDALvufjW4DWNVu75vPMMRC5GvWCodEILvdMNtmzajcftf3GQZHGYSN7Ra25UW0ZiVkSjQMyv\/bFp0AAC\/3IjEtVswxIF+0kS0x6Ia7vQFapaXMN9tXVVWNqq6u3odz\/lcA7\/hBcV1dXYs0TTvdFxU1NTX+LmEoIWQ5IeTsXC73Zi6Xi2ez2asZY0fKsvyZKIp1FRNJCMBHgiD8oVgstmaz2ZpisXg7pXSkoihzS6XSBblc7kMvM+TUaDQaJ4S8LoriuZZlCdlsdt9MJnMEYywqiuLlhJCnVVXdnpbqHfrXDi4UCvmBeHcQQh4ghAzN5XJ3ZLPZasMw5hJCDhNF8T3GWO9cLod8Pr8kk8mcYtv2VkEQIgCcaDT6calUun\/r1q336rq+kBDSIIri04qifKmq6pPbtm17vlAovO4tjmMVRbnHN5N7JADMpZTeWSgU8rlcbmRnZ+celmXlRVG8SJbl5YIgjKoQeAMFQZhnGEZTNpsdnM\/nm7u6uj4A8HtCyK8ty9reh8NrEY1isei\/Mtls9k7GWH8AUVEUh8VisWeKxeIjW7dufVTX9aWEkKQkSY+Kojgmn88jm83eZFlWmyAIIwAcbNv2wGKxiGw2+3w+n\/8bgN0B9Oec71eZAss5TwD4jFJ6faFQWJbL5fp0d3ef7DjO7rIszxNFcc+KFMK\/EUJuyuVy9xYKhUh3d\/fRqqruI0nSDYZh9O7q6kJHR8fITCYTBuB6C5rd2dm5oaOjY1Y+n19TKpWM7u7uSw3DmC8IQiMAIknSY4VC4WbDMPJe3M2VsVhsKIDbKKU3M8aaM5nM+ZlMptlxnM2U0hNFUXxbEATRszbsMPum0gNJCFnGOT8pk8mMz+fz4Ww2eweAkyRJmqXrejSXy+nd3d0Xapq2WhTFUZTSUbZth0zTnGSaJgghL3LOh3R1dS3O5\/NXmKYp6bo+v1AoHF2RQn0IgHdaW1sn5fP5V7weLLfKsjzVv6crRNphhJBVnPPjMpnMU\/l8PpLP5\/8K4BRZlqcZhiHmcrlsNps9zTCMjYIgVFNKY+Fw+LVcLne667p57xl7KpfLqd3d3ae7rpuglMYBVHHOa\/yYDu87r6WUTrdte\/fu7u4LstlsWFXVWYIg3ByJRJ43TROZTKY7n8\/\/hTE2kBASFQRhSDgcfrJUKj3S1tb2iKZpS7w+Jn8XBOHEHsdzgyiKHxiGMSyTyfw8k8kMchynIEnS9ZFI5G3DMJDJZFZlMpnfWJalCoJQB0DknNf5rlBCyDAAn0uSdLSmaatyuVx1Lpe7nBDSWxCEhxhjl5ZKpe3l3L\/pFQiL\/zCOPWo05i3X8MvTzgbTXMxZWBp9yV+3rpn0ZvHIWJ2EqiqGnJFCqnkQhiuzUXi7\/2MLPnpg+JDhe03n3MUVV18y\/Lc3b1v87tT2YakhYUjUgeFIkGLxqOZAGbn7Ljjz1F9jxhf68afeuu7ZjYVBSPY75thUIo5Ysjd0m3rWCmBjuzbkpOu2vvnG8kPeTlVVNUqsG7bDEU8k0asmjDCApmqCrqJbc+2DnfcjLqJ2kIR4LcXWTK3wj7daRkx49OadAeC2P1yFrgx2efmj\/FhSI263PhBwWCSFJN2G3IpnngSAEbvugSEj9sSGduDTJebPQMsul0pBIIWrIRXn611b1s0CAD\/0ov9OByDWewC2ZRnyVhQ5K46SJSvgbLvRgoCDcweGI8CSBiBeD0TDbhgoh9iL3k3Gd+CC83aiTBCEv6uq+hml9GoAEU3TFmSz2cN0Xd8dQAsApFIpPxKfAphAKa3Sdb3LNM1LIpGI6zjOfbquvxcKheqi0ejdFd91HSFkf9d1YRjGHQCKhmE8Ydt2txcFv1DTtKPa29ufyefzTxqGYTPG+gqCAFVV3yGELI5Go7M45ws8k\/1orynWdgMFIWXHECEk5PulvXoaNbIsQ9f1btd1n1EUxZAk6VUvTqNaFMVDKkzeyxhjU7xUQJExVlcoFEZzzq8zDOOPXgR+tWVZu2cymdGc84tUVT3dsqw1XqvwY0VRTFTUGXiKUrqXV8PgQgCrACwvlUpXewtvKhaLveAJLxBCTvSuh5pKpZzq6mqVUnpzNpu9WxTFXcpvIV\/LLqmqqkIqlUI6nUYymXwPwGeu6yISiQyglJ6ZzWaPBnClZVm3+e6OUCh0AgBEIhFNUZTZfsAovOA9L63xY898DkKI5VssPMZRSne1bRuapl0SDocznPNXNU17xMv0uM+\/FoSQX3k1Ltyqqiqk0+kvi8XinqZpqrIsH+p1qfwV53wUIUTzgvqWGoZxgGEYRziOcx6l1JRl2QHwhpc6G6KU7lMoFPZTVfUgPw20VCoZtm338dI8VwB4OZlMdgmCMNOLJ9pVUZS9fdEpy\/J2118PP30CwAuCIMiGYax2HOdiL1j5JsMwvpAkaUQkErnNe37W5nK5\/U3TXOqdu\/6JRGJMLBZDTU3N4\/l8fo5lWQcBWEYIsePxOJLJ5GrO+Tb\/y0ql0s2MsctUVf21ZVnveZk7o6PR6N\/8GBAAKQATBEEghmEscRznYs8Se61pmktkWR4ZDodv9dw0XYIgTPdqoFRxzkcWCoVGVVXP8J5BEYATi8UWEkIWexsAl3Nu+YHRruuOBnAPpRSlUmkSgKckSeKapp1lWRaPRqNnhUKhXwiCgGQy+T4hZK5nbRpIKT0vm80eAuBqx3Hu9MWEJEknVFg8RwO402tmdj+AqQA2apr2iCRJkCTpMAAjZVlGLBZbQgj5zLcsUEoNzjkKhQJUVa3y3D9QVXW8IAi6oiivuK5reS7FY33x+G2vQFj8h9CnsRGXXnEt3p7yLpp6hxEmFt6Z033boRe2frxstV1bPUgEwKFLQzGobxK9Nl3RsmbSQUds2tRycdOgUdonc+agu0iPOOKSDQu2tuTrqxsVUGahyBswoElA+2d\/XQ6g7ZEHbkMBOPyX121507JdRKoisJNHn2i0r4VitWHAiJEwAZRcLp92ffvE9o1d2Kj1SnzpXjsjnYrVSiyLbK6ARQsXeS01Cf7rmc571y43+lQ1SHBtDtsV0DwohcbsLdMdu3TvwQfsj5G7D8c\/5ppn5bfYqIrT7dkdjDmIpmsR7n5z3ba2bRMBYL+D9sMhO1HEYNWu2OyMQIh8LRuEMYZITIbV\/umXORMbfCEEAJwZ6NMA9OsroblRwKD+IhIJEoHJQMDgOAwaSwGJIajv1Yz+ylcIL7iuY+Pnj04Cyq0xHe9FviGQCwDt7u4+p6urqyGbzd5FKUU8Hh9ZV1f3u1BF2bqKoMTTAewJAJZlLUqlUh29e\/dGr169oCiK7e3EzmKMDfJ8tT\/zP++67iovHXMr53wbYwyKopxIKW3Wdf23jLG\/q6pqdHR0XLJ58+bnbNu+rr6+Hul0eh9BEEZ53x8mhCgVwsLxF0H\/ebJtG95u+E+tra3P5HK582Kx2La6ujpIkjSmIpI\/BQDJZBJ1dXUQRVHwgwVVVR0HYKVX26HD\/4xt2+8DmO5VGDQIIRu8yblaFMUqb8LfF8ApXjxIC2Psq4oU3ZmO47R7QmWooigne24dEwBkWW4Kh8MbZFkeX1tb20+SpBvz+fw9AHrtKAiuh1l\/u4+8WCw+DODTRCKBeDzeUpHJkQTgpygKFZYl0RMcCIfDlHNOvWvO\/d09Y+wAAGO8Ntxr4\/H4sj59+qB3796IRqO267qIRqMHO45zcKFQMCmlupem+idZltdHo9Fzq6urTVVVx+q63uZ\/X1VVVYhzruxoLlEUBdXV1VAUxfZ9\/6ZpvgVgvWmaS7Zu3XpkPp\/\/uWmam7q6uv7W0tLyYrFY\/F00GnVTqVScUnpYxXkKVaaGfoMf\/rcAmr3Yos+TyaTRq1cv1NfXQ5IkxyvodqYnTAHAzefzZ3hF2hAOh\/+iKMorbW1tdYZh\/GK7L9Cr\/SLLcmVtFsNvQuYtuBP8bJlQKHSmKIrVXizNxb7rzLbtebW1tbyxsRG1tbUQBMH2hOa5AOLRaBShUKjknytd18cDcHVdf6etrW1MPp8\/UhTFrV6apuO9T6CUyn52EoBL\/FRiQRCmNTQ0oE+fPqipqQkRQiwvjfviCleSXVEP5UEAX6TTacTj8U2++5UQUi1Jkm\/xvLAio2WOf45UVb2ro6PjvUwm8yGA1X41VkEQSEWhPsl7L\/L5\/Nxt27Zd3draep8kSQ\/16tULyWTyRACyN65oZWv7b3oFwZv\/IaxevRphL7gm223VXfTgtndmztZHiSkB6YSLopFEbZ9aNLqfomPK6Y8u37jhKgDmrodciGeeuhdftcjnnnTxqnG6TVDbX4alGTBCgzCkUULpw0M+2bRi1vGffPQKRh1ywkG9jlz3YUHjqGkKoZhtQaHPkYel+h62f2TjnLmH7L0nHADXP9A17tMvjT3TQ2Jg9mbMaxk4UOh30\/Tdm+4atXTJ5\/pHH3yInx97DD74VP3F\/U9nzwn3lQHOwVwLUnIYqkvvmAvnPns5ADz0+PMAUPXQy23nIiFutwQQAJobQbNsQFvz1DOOt1CcefrFAID1m81DV6+30tG0+PU0Uy4iCRNO56yPe55HXbfRugXIdJRjnywNKGSdOBCBFeqNZA1FElshdY\/Tiwuee2Pz6tnPFx1M6xkc+D0entUA2nVdvzEcDjcrinIapfT0aDQq27Z9So+20Qf6Jv9wOLyHIAjLCoWCCCDGOe\/tFQSiAPq6rrsWQLEipVD2I74tyxK8FEudMWb67pZ4PA7Lst52HOftdDpdFw6HHy0WixcCIN6kbHHO7YoF8et+JfyzPoEgCB2u6\/42lUohHo\/\/Vtf1P9u23VShlyw\/JsNbJGhF6uVSf+Hzd7Xe77b5waFeJUPuLVIO59zx\/b4VQY9ZADk\/Gt913XbG2HpBEOq9Qkr76Lr+ommak+Lx+B8ikUiDl\/p4Juf8zEQi8YRlWRf6hZZ8TNOEaZpfyyxJJpOm3yPDNM13Kio18orrZ\/rv9wqkfT2guVwHQdjuXauIr2CM7e9\/VpblBkEQFhQKBeoF7jXZts0IIZQQMqJUKs1yXfeF6urqO7zv6m9Z1jhZlu+Mx+NjdV1\/x19QvUBYf5NlV9630WjU\/7deIVA3VJzfj\/y\/I4ricsuyzoxGo2IikbhG07Q\/uq6bqkiP\/lrOZsVCV\/njw\/1jVBTlaEmSlmuaJgBIMMYavCyNWkppE+e82xOPi7q6ui6sqqoaL4pio+u6J5umeQCAnC\/go9Gon57qAnA9AbgRwKaKWi7L\/GwnSmmNZ6ma0eOZ+4UgCMtLpRIFkGKM1Xt1YmoANDHGlnPO9YrNwLoKMfqaf658S0XlPsO7R+IA9vMFWDQavZEQcoWqqoQQ0tt13ZBXzr6\/67ooFouIx+O2oih+\/523\/MJwjDFa2fnXO37ixRL5Yq9UMT5WKpWOrbwYnuiunM+o75oTRRGWZd0HANXV1cMppfeVSqVj\/HR0r4PwT7J52Y9SWKxsk+G6BkzDHX7JPV2fLl5oJJP9BXBOYIaGYnAvB9LKyzatnPvw7\/ImPuo3YBiefPoZxIbshzenqdff\/uiKu7gooq6vAE21geRwjKjJou31\/SZsbV11xoypL+HAw08e0fzzTR90d1ikZogCZlpwaRVCsSgyKg5t67LmDm2K4tkp\/LInns2dEe0rg4BDFGUo2gasKA7ZWbb7P7eqxfj1gz87BADSVz+w7WEoAqIRCua40EgtBsW6kf\/w8ls4sOSU087HbiMG4f5J3WetXGVVJXtL24tcce4glBgAsfv1zIblXz0LAGPPOBsH7bcTAGD2CuNAaAxKHSoCNzkgpBFmbehu\/+qznuexYchJyOmA6vQv2\/x1wA2juaavgQZ7Kqylk77IbXh7YkdH9yu2Fxnvz86VIUkVEwl28Gt4kfX+bvANRVFOcxwHoVDoZEmSdnNdd1FFFkY9YwySJEFV1Y9KpdKTAJq8RX2zl00hA1jrlXAen0qljpIkCbFY7HDG2KeMsd0lSRpGCEGxWHzTi4ZHKpXyd279BUF4gDF2fEdHh6Oq6rk1NTW\/o5Qe4E2GrIeY4JXCoqKKpcQ5\/wMh5KpisZjo7u6+PxaLFcPh8M2e0HH9RcRb\/LYvwIyx9gpTdKWFKedP8t5uzJ+QOeeceRkbsYo0SV4pmrydV85Pm3VdV\/aaJnVks9nRjuNMjsViO\/sZLbZtXxCPx5t0Xf955TX0eyn0GJ\/sHYtGCGnxK2dWjBGc82\/tUlYRt\/Lffk4prfezhXRdX9DV1XWXF2hLvWu4ybv2LYlEApzz\/+rs7BSTyeStvjizLKtOkqRp8Xj855qmTfEWP5GQcsW3yswbvzKrd61YhTjSfLHruX6QTqd9a9Z\/EUKu8OJIrkkmk4PD4bDfOt7tabHbwa414YupfD7\/nmEYL3nWIuYdX5eX0bHKf7YkSYJlWS84jrOnFweE6urq33d1dc2tLGjmuZPcioUyBy\/TybMg+Jkv1HsWFUVRIIpitV\/XIZ\/Pv20YxisA+nhj2ohyO3ERwHrvWNyKY8pXBqn2qIDKe24+CCFRACn\/vHR1dT3pOM4SAHUoZxqt8cSp5T9nhBDJu442gM0VmSW0QjRYnmCSUS4n7t9ToUrrlOcKgeM42\/vgVHpy\/SFHIhG\/aNgBgiD83bbt3drb21e4rntGbW3tfd54f7IFLn6UwqIq7qBfXQgPTMocv3iemkwOF2GwNJL1NejrzkV26llPLFu37goARvOQfTD380\/QKyXhd3e33jfu5dKVYpWEqhRBSeUQq4ZgaGghWl4+6o72rs6b3npjAg45cuzQQSds+mTzFi3si4oSq8GAwdVw5vzqy\/XLpj\/15xsvhRmqPvD3d695ELUCFIWCuRyuY0GsGYYm9zNMn3jjByN32xlHHXM87pmo3blsidmvalgYzOEwLILa5mpIay6Yu3zj+rsA4M83XgMAeH9O6RwQApH+UyQYloTejRyY\/8wkw0tV3H2fQ+AAyJUcfL7MOAYh+rVYBwIOUUkjpH+41cjlPgUAwUt5lUQB1FiHxVPvg21q2xeTQt74NLL8zY0tG+b\/ueDiq++6Fn5XxR5+ZMt\/SL0JJAQA8XgckiStZoxxzjnxzPeHmqa5qFAo+JUSt\/h+SUppDsBHlX84EolsL4Bj2zZUVZ3gOE4pnU6\/WlVV9RfTNIdzzkdYloVCofChZVmX+zEDsizDsqw6AHMA9Mrlcp9pmjY6FovpkiRd6C+iPaoi2v4EwjkXfWsCpRSmaf5dEITzTNN0M5nMUbIsf5hIJC6viCvgO1pAvV1OrqfL0vtOqzL1s0LkMADcsyK0+BkUXh+WCCFEq5jAQ\/5Eruv66kQigWg0epWmaR\/k8\/kRqqpeGI\/HbwqHw328EubHSpJ0kmVZr2+\/gF7FyR7puSFvUi\/6liKPaMWkXJkyK1QUzWL+TtN13XDl+fCzcAghW\/yMAUqpCWBKz3vNj8VIp9P76Lq+f7FYvK2jo+OlSCRydzweP9FPkxVF8Q+u607puQDBS2f0+6FUCKdQT1cQIQTpdHp7BhDn\/DVBEH6mqmo2n8+PDofDCyORyKOVdSf8WJPKFNoe5zBXUW1zM4APdnSMqqpCUZTtAc2U0ppisThK07RiJBKJy7J8aiKRWF4oFG73q2F6bjJSYQ1yfYHjWSpkf5fvPa9Z73x3VCzE6wF8WCmO\/G69fhMw13WVb4odqEzD7lHV1fXGWUA5fbrZi0FYAuCdnlYkX+h4nw95\/y0ByFcUyKt0pVqMMZimacqyvJlS2uDNL4N6bAbAGDusUCi0M8aW9xw\/Y8z1061t2z6YEDKTMYbOzs5nHMf5bTqdjlNKn+5ZSK0yPTsQFv+hLF+dQzEvYMVmdSdEJTBlCIbWcYirr9i44qMHzykxzASAAcMPxNOvzkB9SqAX\/6391XGTiicqdTISURd5TUaqsRkD9NewbMKYswsmxl94wxOI7XLagH6\/2DB7U5uZqhlcFhUaT6OpqRryZ6fMW\/rV64f\/4brLSmPOu7thn7O7XtZVF7X9QnBsDsJtmHJfDI1vRevkY\/4A4JnZM97DxiwOvf6hlgukPiEQDrjMBE0MR4M+EyumP3k1AIx7+hnsNGIwZi8sHTf1M223cG2oImjTBaL9ESnMxubF7z4DAGFFwJ57HIw1m4CV69R9F663hohJ4Wt7bcfliEcBc+3cz4sMBdmLjxOE8o541hs3IRYGXC\/oQqCAZuK8kgF8m3PDf3wqezb06Ooo95ikmR\/06LruBkEQ2iilfbygq4MAPEgpRS6XgyAIU6qrqy9hjCEUCh0XDoerotFoxi+xHA6HJc75boVCYVk8Hte9iaJaVdVN3d3dmzjnfRzH+RjA+V5EN7wgLX8yOglAL8YYdF2\/X5ZlPZ1OJ72ywyCEED8V1iuJ7FTsTEJ+VoiXzniyZ2aeDODDeDwOQsiwikWGVYoJbyf6tZRcb2KSKr0FPXZPwj\/\/l3NVVWEYxkdVVVWtlNI+oigOpJQO0HV9qdeDIsYY6y+KIjRNK7iu+6rnO\/+1KIojJUk603Gcx7PZ7OOO4zwVj8d\/5\/3x9Pd49Pxxupxzt2JRDldMzHqFYGAVO1XBL04E4OcVwXIwTRPd3d0QRfGDmpoah3MuSpJ0RCwW202W5UX+ztIrvLSnqqpfWZYVAfDXUCj0puu6azRNO8myrP3S6fRbiqLUAKj2BBsjhDh+iAgqaqqEw2FkMhl\/Ma9cFQS\/nkQkEvGvw74AfubFFYyjlC6srq6G67rN\/sJimiatLHtt2\/b2dPQKF8\/r0Wj0OM8VcpJpmrekUinXT28Mh8Np27Z3UVX1k3A4zCvKbC\/IZrPvMsYOl2V5syAINfF4\/C+WZc3TdX2qX1SuR+0FqfK7AQz0j0vTtBWc8\/m6roNS+m4oFPqFN6aTTdO80++n44n5tGEYO2\/btm22aZrwx+XdN9u\/Ywf9P1xvPDYAU9M0mKapxWKxDyORyG+9azoGwDt+0Szv+waWSqVYqVRa5B2TUvFsVOaBVwoLnTGGbDaLRCLxXjKZHOUFfJ6k6\/p9yWQS3hykcM4naZp2YzQaXe6dd9d\/3hzHMf0gU8dxzvFiQVzHce6Ox+OIx+M7maapeKKH+OmzXk2Un4yw+FEe6SEjU+hTG8LCtYm9SPMQDFamo\/RO\/0cXTn1w5xLDTAHAnfc\/iyff\/ATxCGLHXrFh3mPjsifGesuIR2zkrQRq+zajufNvpcUTxowumBh\/3V9ewC9OO7\/vOTes\/2RTu1lT3T8EZtlQWQq9G+ugzP\/1vKXzJh\/+6isvlO64+0HcOV57efG89j7VfT1RARcqS6NfnzDUmWMmdGXzd74+4QVEUk3KqdduehQmkExScOZC5zVoqiqiMO\/3t2nAZ7vtvgfO+O1vAADj\/lG4GBZFpGL\/ZDkUNWkR9rpn3sjp+BIA9j9sLKrqBsLVDKzZ4hyQ6XIQU8jXtsgOIgixLPTWDz8AynUr\/JfLASpFkagZhHh1f8Sr+yNZNwRKrPY7bxzumZHr6uq21\/z3Vb7n0misWFAgSVLa3y0YhlHknK\/zhYKiKCdEIpFd\/e6IhmFMUVX1Na8CZ0MikXhaFEWFUgpZlpsBfJHL5V7P5\/O6V0TnTkmSxgF4i1J6uCRJh0aj0atqamo+r6urQ01NDWKxGAzD8BuMuf6OMhqNDvYaL93OOW\/yJraaRCLR4E+QgiDECSFRb1GU\/QXANE2TUmp5vUeGeVaBQxhjF\/qTVCwW69fQ0FAZyNWrIqhVVBTFNxsn\/EVXEATJzyrwfLkJ\/1zKsoxQKATTNDPZbPZ272ckFoud5rfM5pz\/Spbl\/rZtI5vN\/tn3sQNYG4\/Hz0gkEsfU1NSgpqYGoig+6y2Iqm3b0yuvcSgU6nlN04SQGm\/8MUVRYn6TJ0rp9iA2QRBoOBz2a2LM93ed8Xj86FQqBVEUz3Ac5yZ\/IfK0HDjnsCxrRbFYvN+vvhqNRp+QJKm3lxVTRSl9LZfLzSkWixLnfIUsyzSdTo+Lx+Oora1FPB7\/VBCEaV5n2\/cAMMuyoKrqOkLIKu9+OSAejw\/wWmCPJYQM8SxEUsV1UuLxODjnyGQy\/vVy\/IVDUZQh6XQagiCcyznf7kIKhULN0WgUtm1vLxutqur2l1ef4jld1+d6gneneDz+XEUPj+Gc869yudyDAHiFVeq9XC63jHN+oSiKRqFQONnfKSeTyYnRaLTZ7wtTGcsiSdLIcDg8rLa21ncznundPygUCrcCsL20y8cNw1jo9QUZmUgknvCLu8myPMJ13aVegK9fSC3mP9uEENnvN+I3xqvIhpD894VCIe7Hs6iqervjOFkvNuTsZDJ5qX+fhUKhY2zbXpvJZM735o4YIaS393wokiRFKjqNpit6Ajn+9SsWi3cZhrHeyxI5IJ1O3+E\/85IkTdY0Leq67usVx7M9I0qWZcF3lVBKXe\/nQiwWa\/bcb3+rzCNIJBLEj7FxHGeHrx8j5MdqntnqYPcTrzMXbJt7XSa38KGT8yamAcBOux2At6d8iAG9w3hphtF47wvtsxbM0\/onB4QgcgtF3gvNTUmk1l65cf6HDxzGgI033DEeY887s8\/pV23+dNkqram6UQZ3bKhuAr37NiCx4tLli2Y8csC+++2b+3Tup3j4Nf2vl9208er4kBAkUnY5qKaI6qa+qF936cL50x7Ze\/\/997fnzJmDh1\/R77\/slo1XpIaGQBlgWgyJxkHoteX6RfPfv2d3ABj37As495wz8MU6fZ\/DL9rymcooUrFydgcBh0bqMLBqIzpfH3VsR958DwAeefIFnHruGbCKFq59pPPtF9\/UflHdKHwtvsIWG9BHWIKt7+y3a0HHkv92c4CgqbkvJEnc3qUym82iq6sTQk+HcUUkIwdQU1uLkBfIVxm2QQj5E4DT\/ewAb5HtFEXxZU3THioWi2sVRbk4mUz+vaKXQ4ZS+ophGH9TVXWt67qReDz+djgcHu3txFzGmOG6brRUKpVUVT0awFyvCdkLlNIzOOedgiB8QQixABS9qoUdhJBPbdt+K5PJqF72QSwcDn8ejUZ3IoRwx3FIoVBojUaj4VAoVOWbtUul0h9lWZ4fCoXucV13F998TCl90zCMO\/L5\/BfxePzeRCJxjT+x5fP5AiFEi8fjjb47xDCMmYyxk8Lh8EWu697iWxG9KoO\/VBQlZtv2O4SQJm+B1V3XvUYQhOdFUbzPcZzz\/R2nIAjv67r+m0KhsM0LzLwokUg86jW5eh3ANtd1LzJNk+Tz+Rtd171LlmW\/C+lDtm1fKsuyJUnSm7Ist9i2\/RtN06qy2eyFnPMnKuMrampqKneeDYSQiZzzwyp2wDNN0zw6Go0O4ZxP5Zw3eFYK17btS3K53BOccymdTs+NRCJ7+a2u8\/l8u2VZk6uqqn5LCAk7jlPUNO00VVXfqTC9PxeLxc72FhDOGNMYY1GvK+dYURQn1dXVDTMMYyaAOlmWN8myPIFSuptpmj\/P5XJLdF0\/BEC2olX8pclk8iHvHnAcxxHz+bxp2\/Ye1dXVTZzz8ZzzOm+HWpIk6aFMJvM30zQziqL4gmJCNBo9zQ8WLhaLHZ4AqvPN85qmvZPJZI77jumrPpVKvRMOh\/fyxIPLGDMdx4kUi8VWXdcPTaVSa2Ox2AW2bV8LYCBjbL7jOBc4jvNVOBx+kHN+qS9IvEqmj+Vyucu8rJuNjLG+nvhYrijKawD2cxznCNM0kcvlLmOMPdzDRdeUTCanhMPhEZ6FyGWMma7rRgqFwiZd1w9MJBJbEonEZbZt3wIg7T0TW0VRfKBQKDxECDGi0SgIIUMB3MU5P8EX2ZTSRZzzy4rF4ixN0yCK4n7JZHKqoigxT6ybjDHuOI6Sy+Wm2bZ9eF1dXVySpMmO4xxdMdRZhULhkGg0OlyW5dmu61Z59x23LOuCfD7\/lGeVGRqPxz8Ih8N9vU2MyTkPedkeR8my\/GE6ne5FKb2FMXaOb2WllG60LOuqXC73hizLO8disfmKosiEEFfXdaZp2rZEIlErCILiW90ymcxJhmG88Y0bsR\/hGvyjdIUcc+IlYCQitS2c+tTmDYtvAtABAIN23h8vvDUTA3oLWNOi737137Z8vLWNVVUNDsG1LKihwRjSALC5R07\/cuFHJwHI3f\/4RPz8lFN7j7mmdfaylXpTdZMMODY0Fkfvvg2Ir7h05aIZjxy273575z6d+ynemeecedmfNlytNIcgC+W25IbNEO\/VF025x7s\/m\/bIybvuups9Z84crO3AAZfdv\/EKsZcMAQDjNnh0KOqtL7Bp5j3XAcCee+2JM846AwDw+oel3xRbbdQMC8N1uGe6Y0g3xEE3T\/rcFxWyRHH4IQciKQB5QUguWu\/sgxC+lg0CzhEKR0E65i02dSwRKUB7+Dccl8M2dYRCqX9JWQuEIJ\/L7eiBIZ65+e9eIJrEObcppX0450MZY7Wc87Wqqo4zDEMHUM05L1BKGznngxlj1QDWiqKoFQqFI0ql0nGSJB1HCBnKGCtZlvU253w8ANXLgYeu6zcoitKgKMoRgiAcWxkf4S1ml4qiuEmSpMNM09wAoGRZ1pFe7YhhlmV9zhi7yXGcoymlV3LOW2zb3uy67juCIOwDYDaAx7ygt4ggCHvatt0fwBfFYvFawzA2SZJ0nG3bOdu2b6WUbjZN8wnOuei6bott25\/KsuwUi0XKOf8vlCs5UkrpSMZYPy+g7nUAKznnjFLan3PeC0AVIaSVc\/5HL6AvTCndxXGcvn6dAtM0H+vq6npXkqTfiqJ4EmNsuOM49zuO87gXBAfXdf128E+4rnsnpXSgLMu3E0L2dl13lmVZtwNfj6VxXRednZ2V1zfMOV\/k+cI1lCt+7uK6bn9N02TO+UQAazjnriAIgzjntX6aYC6XO0bTtCsEQTjAsqw2x3FuE0VxdVdX1wLGWEwQhL6c86ZKn76qqudomvasLMu\/IoTs7ImVaYyxZwG0e+Pb7DjOkZzzFlmWbxQEYQzn3LIs63rG2IN+rId\/DLquP2zb9hpJkk4H0Ne27ZWO49wtiuK6rq6ugxljLwNY5lkIenPOGx3HSQHI+O3nDcM4R9O0lYIgHGzbdovjOH+UJCllGMbdjLGi4zitjuN89j0eofZcLrdvsVgcI0nSMYSQQa7rdtu2\/YZ3Lm1PREUATANwryAII1zX3YVzvso0zZLruteiXEqcAWj2SmInFUXJE0KoKIoolUofFgqFR2RZvoZSWuc4ziO2bT8BYGnPoErO+eZcLrdnqVQaI4ri0d6Y2i3Leg3AJACOrutQVTUK4GnvekMQhIGc836O48QIIYZ3rsKc8y4A13nBnQKldB\/G2BDO+SxPWH+ayWT6i6J4qlfvpbdt22sdxxkP4CPPNVrrOM5yQshU71hlSumurusO8FxhEwAsr7jv6iriulZls9mdi8XiKZIkHQ2gv23byxzHuRfACs9tIrpl9Xw7yhU8CaV0L8bYUNd1oev6Mtu295ck6XrOeZVhGJMBPOG67uWEkF8wxtbYtt3GGFv8k4ve7JmP\/mN49SQZk3DcyZfhiQ864HCOD7\/IH1d39DoXe63itSet4\/GfreaxsZzvdt42PnDA8OcAoKFpMF54eQZUzqv2vqB1FXZbzqtOWM+rj1\/FQ8du5f0v5Hy30ZeuAFC7x8hR4JxjS4nvVnfMKob9VvOak9bz9PHrePLYFTw+lvO9z53FkxJ+BgCTJ08G5xyjL9r4JXZZyWt+tZ5XHb+Wh37exoddaPJBQ0dtN6c9++yE8t\/eajf1\/uXaEg5ew6tOWMfTx6\/jVb9cy0O\/6OTDz23lffvUneN\/5jfnnFduiV2y8c6M3PHCgat45NjyZ\/xX9Gdreb9zHT5837GPAmVR0fPl70779R+AAf0HYPDgIaipKbtChG\/xrQmEgFaYPP+VYjDfJ7fbN7F\/o1oWRdTV1aG+vh7V1dVIJBI31tbW8mQy2a4oygRZlv+mKMpj8Xj88\/r6et7Y2MhTqdSr3zQGv4\/FvzrO75uj7gdj\/it\/4\/t8\/\/c55\/6u9l\/Jp+95Tb\/ts9\/nHPV8z7eNx49v+T5j\/Hc06fJraHzfz+\/oWP7tZmZPFP+QGghVVVWphoaGtj59+vB0Oj3z+x7T97mO32dM\/8o88F3n7oc+G55L4zvf833G2fM+8102P\/U1+EdpsaikecBOmPD8U6geuj9WbLQwaXr2gt\/8of1xi1HU9hOgaYBQNRg7RRZh27vH\/nlTW9ttQ3beB9PnzkEyJiSPvqh1xrzPC0Oq+isgzELJTaJX3wYkV12+auG0hw8ZNXLvznnzPweAyBG\/Xf9iRxsntYMlODYHuAUj1B87JTuw5Y0Tr8vbeO\/ue8dhzJgxuOmxrtunzdH3TPaXwRwOy2ZINvRCrO2O1fNXffFHANhl9z1w5PGnwTSBlz4untu2yYqm+yngXmlM5jqIpWuA1vtWbG7tGL89xuSXl2LRFiDEHHyy0jrYNTiU6kqLBYdLYwixLuits2d+U8wEBWBbFqxyQNa\/NvmVn84fJHT\/J0VjKKVIJpN+yli1LMuzw+HwsM7OzpdN0zyrMrjLMAw4jnN5bW3tA4SQIT0npR7R+v97\/sh\/5trv8Hc\/1FTqZyD8T77\/+07q3\/TZHzL+\/+m59heFinbo32sM\/5Nz\/X\/dh\/0ti+o3HYMXkCrYti1694Xy79ygfp\/r9kPE3jc9F5XX+IeM93+6wfnfun8DV8j\/p8SjURRVFXvsdSje\/Hg6GhPAyk0aXv+460+Tppi3OaKAujogX5KQbmxGf30SXzVh7FkZDS+O2G1v\/OOjWUglhPBRF22cPucTY5f0YAWUOSg6cTQ0NSC58rKVC6c\/fDBAOt944zUAwCX3bnt25VJzRGpQOViTwkWJ16B\/LwH6zBPHt3V037v3PvvhumvOxZcrsPdDkzN\/JFUiRIGAORbcyEA0uIvRMu2m65nXGfKaq65Fnypga4ctvTarcA7CYrmEtrdw6yyKJlmDue75Z5nfvXWXkdh1z53hcCASIVi0xjgKXt8w\/1kiAMRILQRtSi6zbctM4L8XlvDfyDmgaipisTj4f0DDnKqqKr\/IFQRBuBDAMFVV20zTvCQcDtsVjax8S0SXJzKW\/Vj9nQE\/bbxqtohEInAcJ0QI8evGyMHZCQiExfdk5sKtMC2GpgYFigwwzjFpuvbEhAml88W6EGpTLnJGEg396lHTcnd2yfs3HFdimDNi173xyazZYIokn3jlpmlz5hgjU4NCoNxBwQqj14DeqF533Zr50x8+GEDnK5NfRp++jbhnYuYPjz6XOyXaPwSBAJwzqLaM+uYaRJadN2\/+srnnAATPP\/8iAOD6RzffX8ww1A6U4DoMmh1F30YRzufXPNtRwj8A4NzzLsJZZ44FB\/DFWmPMZwv1ftFa+WsFsaTEAETzb2TWrF38gn\/sR48+ACObKCyuYXM7H\/7VensnROnX4itcxhCLUlhr531ZsLEN+Gd\/kB2haxos20JI\/v97HvIq4aGjowNeEa3uZDIJRVF6p9PpkZFI5GN\/N+GZMH8N4MVcLufoun77993NBAT8JyAIAuLxOGKxGCRJ8iul9qKUxjxLQJUkSaFwOGwWCoXghAUEwuLbSNXEQSlg2IBVBLnmr1unPjchf0R0gAJFtJB3+qDfgDhiyy9etWTaY0fawOY99zkIcz6ZhZAEHH\/N+o+mfmDvmxwSgggHRSuMuuZG1G68re2rD+49CkDnuOdexMljTsGXq4xjr3+o4w5aJ0CRCbjLYdocsbq+qGl7uH3hzKd\/DYA\/Pe5ZDBs6AA9NztwwbUZp\/3j\/EFyXw3ZcxBsaEW19qGXp\/A+v8Y9hzClXorUTEJmL5\/9RuAQugSITMK+mhOXKqA4zFL96bLxaDiwCABx7wlnQHCBCXXyxxDiwc4sjJBu+XsbbZjKquA63Y9o0oFyf4ptNhmV3iGtboIqCHdR0+v8Gx3FQOUHquv644zjD4\/H4ZZFI5CPG2BcoVyxUbNse6bruQFVVl+q6PhbAsmA6CPixEA6HUV1dvd1dYBgGCCFnC4LwF2B7zYzm3r17TzEM45ZCofDJjp9\/Hpj2AwJhAQAvvbURABCSAU3F8ZPft4+QmmVI1IImD8GQOgd8zuEfL1gw7UQOFPc+4GB87oUanHLjho\/fnmoflBgsQYKDoqWgvm8j6lpu3bJwyi0HcmDToQcfjHPPPh3LNqPvsZdsfgGcorpahGNzuI4NmhqKfu4MrH3\/srMYsHGvfQ\/Ab889Gx0l7HLbk5k7kRIhiwTcseGE+qI\/lmPrJ1ddZwMZADhh7IUYtvdgdLQ72NJuHv7Bl+oBco0I7okKAgZE+yGmTmObV3z4tH\/ce+21B3bebRTau4FUNIKP5qlHweUQReJ9tvziQhoKb0Gma9FnACB827xBAMcFioU8ovEEvr001v97ek6CmqZdrmnaU5IkHUsI2Y9z3kQIyTuO8yJj7H0AnwXTQMCPBV8I+AXlKuNMHMfZmTG2iBAyvvwjIlFK97Vt+yAAn3zX3wwI+EkLi0KxvGuVRQ7Nom64Lgqz6MCODsPO1VuR++Cwp9euW3UeABx62GhMn1buv3XeXVvfm\/yGfmhssAKZOChaEdQ1N6Ju0y2ti9+79WAH2HTowQdi+syZAECuvLflpc52t6pmSDmugjMLTmQwBsda0Pbmr67K2Zi68657Ysas2QCAc\/+0+YHurQ5qh4Xg2gyaq6BXrxDsL254ZVvWnVQePcWVN1yLdAJoToh49r3Mb9QuFzWDpO0VME2boLaBQlwx8a2i\/c+d9pgzfo9kCli7qgiBCdEFG40DIQOOS2BaAqgUAacypJoEYvq0TRszpXkAYH9H\/BMHUCiWUGPboMJ\/ZE21pbZtLw0e94CfAn5NlZ7Bx67rXvdDgx0DAn7ywiIkiZ6wKNfD100CqWYIdo1+gc2Tj7lhS2fmbgCYOPFlnHrqrwEAlz7Q+frTz+WOig1WEBZdFM0IapoaUd9ya9vi9249yAI27LPvgZg2vSzsb36i47EPPyrtlxyigDnlypoa6jCg3oY5Y8xTbR2Z+wHg1j\/dgKgEPPZG5op3pxZHxwcqcJ1yGd5I9UCkOp9tX7bg7Sv9sZ95zvk4eLcBKBYcbNbcYRM+LIxFtQjGfGsFhxuqR0RdhPaFLzzuf64qHcNRxx2LVhVI9I7j08U4fuW2fg3pQUBE4ugTsmAWt0JiRcSog8zyZ+bogCp9T53gMA61pOLrbRX+cyZaf+cVEPBTEhg7+ndAQCAsfgBKonq7xcI2RKm6sQap9pew7t3TzugoYgIAvDhxMk49dQwA4LoHO1985KGOE2M7hREWXRSMEOr6NqJhy62bF753y4E20LLb7ntjzuxPQChw36TuC\/7yaPcF4eYQRAJwMKhWCHWNVRDnnz5rybIvzgeAieMn4ldjxqAz7w6\/fVzmr0h7LhDXgSn2QV9pE7rmXvlHy+sMOmqvPTD+mUcBAPGEiAdfzZyX2eAI1UNC22MrbIchXR8D1r0wq73obG9QNGy3g7ClLYvuhcuQToj4Yn6pXtz0FXoVMl\/luzesN0l2m9a1eq2tdWzZrLFO1SlX2rT\/hUQPwzQQUkLBUxMQEBAQ8NMSFpmujvLBCRSOUBWr3XInlk75w6Emys3HJr48Gaf+uiwq\/vx4x8P3Ptx5enR4GGHJRdFSUN3UhPrNd3cumXLL4TbQAgC33XoDBAGYtsDY+65nMo8jLiAaLXcsNUyOZJ9m1LXf37bw04mnAcCll1yKU888FQBw0V3t97Stt4Xa4WVrhW5LqG+KgS284L3N7flx\/rgPPOhggBBkShxhhcRenaGdiTj9Z9MgcFikCtW0FYW1zz1decwb12\/E\/ff+HaVCBpFoCi1rv3q8sOrzccuBol9mOyAgICAgIBAWP4Bxfzy4\/A9CQDj\/uFjMD7aBtQDw0qTXMPaUkwAANz\/Z8cBf7u36fWRoGJGQi6KhINWnCX223dO1dMoNBxte2eOXJr6E448\/Ea3dTvUZf9zyUmeGoaavDNfmcG0bcvVQ9LPfx5oPrjrdBVr323sUHnrkIQDAK9MKv3vt3fwvIgPKWSCuYyFUNQx1xcnFpfMmXu6PecRuI\/G7K+\/Bym1AXZJg\/Dv50xYtNWoTTf9MMWXMQbyqGmL7Qyvb2ronVh7z1s2rsMteh6LfgIGQZQW5zjUGAIOgXOgq8KwGBAQEBATC4geiq7nK\/213ONoBYMTue2LPQ0\/C\/NVFdGSLOz\/yqnY5GmVEFYaCHkJN3yb02nJ355J3bzjIKKclYuLElzD21LG+dePZrZvsAekhCpjNAdeEFR6CocombH331MuyJmYAwCVXXgcAyJac\/jc81PkAogLCIQLuuDDEBgwMb0XXB1f+yRcuAHD51ddgpyYJy9oMOFTCP2YWLwQlkIRyimm5IFYMzUoJ+RWPP+700AqcM9iW8YOqXQYEBAQEBATC4luQlYhvsADngKFqAICjT7gCC5aVsG3zKtiuFJJjCSjURckIobqxLCqWV4qKlybi1LFj4QC49uGOW8a9nD8uNjAEwjnAHai0AYMbbOgfn\/jI5m25hwHgvAsuxeljxyBrcFxwZ\/s9G9ZY0ZrhZSGiWxQNzSmIK66euXFz64P+eHfdbS8cMfpULF7GkY4Ac2aVfjl1vjYyXC9uj63g3EEoOQBKdnJHy7oVL+7ouLdsWonGfsNh21ZwZwcEBAQE\/D+B\/lQOtHHwfqgdfiqWrHXQZTQjZ9YTyhyYrlx2f7Tf3bX83RsO1jxRMf6F8Th1bDlG4uOvtDEPPJf5s1wvISQSgDOoTgS9+qQhLT5nxupVCy4FgJF77oc\/3\/EAAGDqzMKZk98qjon0C4E5HIxZEFMDUF34wNkw55mrKsd21oVXwgkTtBZUGBLFa58Uz2MlhmiofHkIAN2WURfncNaPm2gA3Ts6xvYt65DPdkKSgwDLgICAgIDAYvFvo+RZKIB\/9sC4+qrLsO9IAa0teaRiFKs380HthRBSzc3o0\/5AdunbNxyiAysB4NBDD8WZZ5wJAFi1WR92\/m2tz0OiSCQFMJdDt4B0n0bUtt3dMn\/2pLEAsNOIPTBtxhykYgStWbvXDY933484RVgpu0B0UoP+iSy637\/kpiLDfH98e+2zH04\/4zQUS8DuQ8No63b2fHue+XMh\/c8UU8CFEOuPUP4jd9OSD57+puMu5Dph2wYEQQzu7ICAgICAQFj8u+jTUAcAcBwbxWIJDz78DM49byzU9naMGBFGrJojmxNrSHU1mjofVldMufJwHVgOAIcfPhoffVQumGU5rnzK9R0TWzY6kZrBZXeG49gQ00PR13wPq9+74SyGcvzGLbf8AakYgQvgtie6Hti43qquGhgCdzgMm6CqVw3C6y7\/amXLurv9cYZCEl6d\/AoaYkBtDBAg4N4J2fMLLTaqhspwHQZKygWxqusI7MXPvFJZEKsnnHNs3bwWvZuHBnd2QEBAQEAgLP5dvPLu3LK1gjEoIRGNjX2wdHUWjFEQQlDLACNS3din4xGsmnXZQSawAABGjdp7u6gAgBufUN9e\/JU6Mr1TuQgWc03Y4eEYkdyAza+NuShrl9NXL\/79ZTj5V78CALw\/p3TSk+Nzp0T6yQADGLNAE8NQb87BhpkPXVE5zl+OORvNTY1Y3eYiJHG4Lh\/08ar0b0I710AIA3DK77NcoJovRuuKV8Z9p7Wm0A05FAbnLLi7AwICAgICYfHv4N0PyuLA6+CHUqkAxtj26nPxRBIrliz+uGXW32fDExUAsP8B5TTVr75aCQElfLYk0gd9B4DZGyEKFDrtjUF1JZQ+PvGRtk7tcQA4+JAD8PeHy3GYOcNJX\/XQtgcQFxAJUzDHhcbTGJQ2oM34\/d05B7Mrx7l2XStuvu9jdGzbVO7MaVqaNm\/ma4mS2TtR1V+sadx1cGuXE2oadGjCXfXk3I4i+\/i7jr2jbSPy2Q6IUhBnERAQEBAQCIt\/C62b1n\/r7ykn2LxhxUc9fz7l7beQ7c5B1VRYWgb6plXHD9vr3a82lQal9FIbGgclEVpyyofzVy+61P\/M4Sf+HlsMoHOTipenK4+tXhFuSg0ogTmA5XCk6ushr79p2YqVC\/\/U8\/tMowRXz4K6GiiRIRG7bdvKd08tFbMoAWgBal1AtubRwUWLd36fY89nO6AWsxBFObi7AwICAgICYfHvIKQo3\/r7cCQMUfz6oRMAa9etxpp1qyt\/vH7PyDmnN4+a9257uh+qNt62YcEnk0+r\/J4PpizCK5PmA04ONFy3euDe16E1W4uQvhI8tgt6s3nY\/MkdV3HA7jmOaDSBaDyBQqELUkgGcQhkv6+FTGFbrBMAsiXWGlTODAgICAj4T4AGp6AM906G4L38E9O+8osp9Z3\/dfsg6wOseO\/P57hA1z8tDgbU3DrElQJCioiE8f7N9UsP\/13fZBfU6K7olWIwF1z9eLeOqTv6zk3rl6GrYwtCofC3qz8RIMGVCggICAgILBb\/YSqLli0XlbRrQOmtP90phuirKsfi\/3YCJQVyKAIiAEJoCDbMe2kcNuy2ctRpq2cX107oWL549tXf9H3tWzcil+1Afa++sCwzuAABAQEBAYGw+LHDGaDZTKOMLfqu9xIQKOkqrNnUNUd7fuBo27XiDNCCsxgQEBAQ8FOB+J0zAwICAgICAgL+pwSe+4CAgICAgIBAWAQEBAQEBAQEwiIgICAgICAgEBYBAQEBAQEBAYGwCAgICAgICAiERUBAQEBAQEAgLAICAgICAgICYREQEBAQEBAQEAiLgICAgICAgEBYBAQEBAQEBATCIiAgICAgICAgEBYBAQEBAQEBgbAICAgICAgICIRFQEBAQEBAQCAsAgICAgICAgICYREQEBAQEBAQCIuAgICAgICAQFgEBAQEBAQEBATCIiAgICAgICAQFgEBAQEBAQGBsAgICAgICAgIhEVAQEBAQEBAQCAsAgICAgICAgJhERAQEBAQEPBj4v8MAHnMDyoKXc0CAAAAAElFTkSuQmCC";

// default pallete colors
//var mastercolors = ['000000', '993300', '333300', '003300', '003366', '000080', '333399', '333333', '800000', 'FF6600', '808000', '008000', '008080', '0000FF', '666699', '808080', 'FF0000', 'FF9900', '99CC00', '339966', '33CCCC', '3366FF', '800080', '969696', 'FF00FF', 'FFCC00', 'FFFF00', '00FF00', '00FFFF', '00CCFF', '993366', 'C0C0C0', 'FF99CC', 'FFCC99', 'FFFF99', 'CCFFCC', 'CCFFFF', '99CCFF', 'CC99FF', 'FFFFFF'];
var mastercolors = ['fa7166', 'cf2424', 'a01a1a', '7e3838', 'ca7609', 'f88015', 'eda12a', 'd5b816', 'e281ca', 'bf53a4', '9d3283', '7a0f60', '542382', '7742a9', '8763ca', 'b586e2', '7399f9', '4e79e6', '2951b9', '133897', '1a5173', '1a699c', '3694b7', '64b9d9', 'a8c67b', '83ad47', '2e8f0c', '176413', '0f4c30', '386651', '3ea987', '7bc3b5'];

// setting up system functions
function loadScript(url, callback){
    // adding the script tag to the head as suggested before
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;

    // then bind the event to the callback function 
    // there are several events for cross browser compatibility
    script.onreadystatechange = callback;
    script.onload = callback;

    // fire the loading
    head.appendChild(script);
};

var modules = new Array();
function getModule(nick){
    for(var i = 0; i < modules.length; i++)
        if (modules[i].nick == nick){
            modules[i].position = i;
            return modules[i];
        }
    return false;

};

function activateContainer(node, container, visible, callback){
    var ops = new Array();
    for(var i = 0; i < node.attributes.dependencies.length; i++){
        var m = getModule(node.attributes.dependencies[i].nick);
        if(!m.initialized)
            ops.push({
                fn: function(data, callback){
                    var initFn = function(name, nick){
                        var m = getModule(nick);
                        
                        var action = String.format(bundle.getMsg('app.layout.initializing.module'), name)+'...';
                        Ext.MessageBox.progress(bundle.getMsg('app.msg.wait.title'), action, '&nbsp;&nbsp;&nbsp;');
                            
                        window[Ext.util.Format.capitalize(nick)+'App']['init']();
                        m.initialized = true;
                        
                        var newpanel = Ext.getCmp('gridPanel'+Ext.util.Format.capitalize(data.nick));
                        container.items.add(newpanel);
                        
                        if(window[Ext.util.Format.capitalize(data.nick)+'App']['showWindow']){
                            window[Ext.util.Format.capitalize(data.nick)+'App']['showWindow'](newpanel); 
                            if(window[Ext.util.Format.capitalize(data.nick)+'App'].window){
                                window[Ext.util.Format.capitalize(data.nick)+'App'].window.cascade(function(component){
                                    if(component.getXType()=='tabpanel'){
                                        for (var i=0; i<component.items.items.length; i++)
                                            component.setActiveTab(i);
                                        component.setActiveTab(0);
                                    }
                                });
                                
                                window[Ext.util.Format.capitalize(data.nick)+'App'].window.hide();
                            }
                        }
                        
                        callback();
                    };
                    
                    
                    var request;
                    if(window.XMLHttpRequest)
                        request = new XMLHttpRequest();
                    else
                        request = new ActiveXObject("Microsoft.XMLHTTP");
                    request.onreadystatechange = function() {
                        if (request.readyState == XMLHttpRequest.DONE) 
                            if(request.responseText.indexOf('symfony')>-1)
                                loadScript('js/app/backend/'+data.nick.toLowerCase()+'.js', initFn.createCallback(data.name, data.nick));
                            else
                                loadScript('js/app/backend/'+data.nick.toLowerCase()+'.my.js', initFn.createCallback(data.name, data.nick));
                        
                    }
                    request.open('GET', 'js/app/backend/'+data.nick.toLowerCase()+'.my.js', false);
                    request.send(); // there will be a 'pause' here until the response to come.

                },
                data: node.attributes.dependencies[i]
            }); 

        if(node.nick == node.attributes.dependencies[i].nick)
            ops.push({
                fn: function(data, callback){
                    var m = getModule(data.nick);
                    if(!m.activated){
                        var action = String.format(bundle.getMsg('app.layout.loading.module'), data.name)+'...';
                        Ext.MessageBox.progress(bundle.getMsg('app.msg.wait.title'), action, '&nbsp;&nbsp;&nbsp;');
                        
                        if(window[Ext.util.Format.capitalize(data.nick)+'App']['applySecurity'])
                            window[Ext.util.Format.capitalize(data.nick)+'App']['applySecurity'](App.groups, App.permissions, Ext.getCmp('gridPanel'+Ext.util.Format.capitalize(data.nick))); 
                        m.activated = true;
                    }
                    
                    if(visible && container.getLayout().setActiveItem){
                        Ext.getCmp('gridPanel'+Ext.util.Format.capitalize(data.nick)).setIconClass(Ext.ux.Icon(node.customicon));
                        container.getLayout().setActiveItem(Ext.getCmp('gridPanel'+Ext.util.Format.capitalize(data.nick)).id); 
                    }
                    
                    callback();
                },
                data: node.attributes.dependencies[i]
            });

        if(node.nick == node.attributes.dependencies[i].nick && callback){
            ops.push({
                fn: function(data, nextstep){
                    if(callback.fn)
                        callback.fn(callback.params);
                    else
                        callback();

                    nextstep();
                }
            });
        }
    }

    followSteps(ops);
};

function showWindow(title, width, height, items, acceptFn, cancelFn, animateTarget, manageable, printFn, menuConfig, hideApply, afterShow){
    var window = new Ext.Window({
        title: title,
        iconCls: Ext.ux.Icon('application_form'),
        modal: true,
        resizable: false,
        closable: false,
        //minimizable: manageable,
        maximizable: manageable,
        layout:'fit',
        width: width,
        height: height,
        closeAction:'hide',
        plain: true,
        items: items,
        tools: [{
            id:'print',
            hidden: printFn ? false : true,
            qtip: bundle.getMsg('app.languaje.report.printview'),
            handler: printFn
        }],
        buttons: [{
            ref: '../submitBtn',
            hidden: acceptFn ? false : true,
            text: bundle.getMsg('app.form.accept'),
            iconCls: Ext.ux.Icon('tick'),
            handler: function(button, eventObject){
                acceptFn(button, eventObject, function callback(){});
            }
        },{
            ref: '../cancelBtn',
            hidden: cancelFn ? false : true,
            text: bundle.getMsg('app.form.cancel'),
            iconCls: Ext.ux.Icon('cross'),
            handler: function(){
                cancelFn();
            }
        },{
            ref: '../applyBtn',
            hidden: hideApply ? true : false,
            text: bundle.getMsg('app.form.apply'),
            iconCls: Ext.ux.Icon('tickpluss', 'myicons'),
            handler: function(button, eventObject){
                acceptFn(button, eventObject);
            } 
        },{
            hidden: menuConfig ? false : true,
            text: bundle.getMsg('app.languaje.report.label'),
            menu: menuConfig
        }],
        listeners: {
            show: afterShow ? afterShow : Ext.emptyFn,
            beforehide: function(window) {
                window.cascade(function(component){
                    if(component.getXType() == 'tabpanel')
                        component.setActiveTab(0);
                    if(component.getXType() == 'tabpanel')
                        component.setActiveTab(0);
                    if(component.getXType() == 'form')
                        component.getForm().reset();
                });
            }
        }
    }).show(animateTarget);

    return window;
};

function showValueForm(app, component, processFn, animateTarget, width, height){
    if(!width)
        width = 450;
    if(!height)
        height = 150;
    
    window[app].valueselectorFormPanel = new Ext.FormPanel({
        labelWidth: 75,
        labelAlign: 'top',
        frame:true,
        bodyStyle:'padding:5px 5px 0',						        
        keys: [formKeyMaping],
        items: [component]
    });
    
    var resetFn = function(){
        window[app].valueselectorFormPanel.getForm().reset();
        window[app].valueselectorWindow.hide();
    };
            
    window[app].valueselectorWindow = App.showWindow(bundle.getMsg('app.form.typevalue'), width, height, window[app].valueselectorFormPanel, 
        function(button){
            if(!button){
                button = new Object;
                button.id = window[app].valueselectorWindow.submitBtn.id;
            }
            if(window[app].valueselectorFormPanel.getForm().isValid()){
                processFn(window[app].valueselectorFormPanel);
                resetFn();
            }
        }, 
        resetFn, 
        animateTarget,
        false,
        false,
        false,
        true);
};

function showPictureForm(showInId, uploadTo, processFn, redefineName, resetImg, webcamDisabled){
    webcam.set_api_url(config.app_host + '/file/request/method/snapshot');
    webcam.set_quality(100); // JPEG quality (1 - 100)
    webcam.set_shutter_sound(true); // play shutter click sound 

    var snapshotHandler = function (imageurl) {
        // show JPEG image in page
        imageurl = imageurl.replace('"', '').replace('"', '');
        Ext.getDom(showInId).src = imageurl;

        // reset camera for another shot
        webcam.reset();
    };

    webcam.set_hook('onComplete', snapshotHandler);

    var excuteFn = function(btn){
        var width = 550;
        var height = 150;
        var content = documentUploadFormPanel;
        var handler = function() {
            if(document.getElementById('picture').files && document.getElementById('picture').files[0] && document.getElementById('picture').files[0].size &&
                config.app_filemaxsize && config.app_filemaxsize != '' &&
                parseFloat(config.app_filemaxsize) < document.getElementById('picture').files[0].size){
                Ext.getCmp('picture').markInvalid(String.format(bundle.getMsg('app.error.filesizeexeded'), document.getElementById('picture').files[0].name, config.app_filemaxsize));
                return;
            }
            
            var theForm = documentUploadFormPanel.getForm();
            if (!theForm.isValid()) 
                return;

            theForm.submit({
                waitTitle : bundle.getMsg('app.msg.wait.title'), 
                waitMsg: bundle.getMsg('app.msg.wait.text'), 
                clientValidation: true,
                params: {
                    redefinename: redefineName && redefineName != '' ? 1: '',
                    custompath: uploadTo
                },
                success: function(form, action) {
                    var object = Ext.util.JSON.decode(action.response.responseText);
                    if(object.success){
                        var href = object.message.replace('/web/', '');

                        if(showInId){
                            document.getElementById(showInId).src = href;
                            pictureWindow.hide();
                        }
                        else{
                            if(processFn){
                                pictureWindow.hide();
                                processFn(href);
                            }
                            else {
                                var win = window.open(href, '_blank');
                                win.focus();
                            }
                        }
                    }
                },
                failure: loadFormFailed
            });
        };
        
        switch(btn){
            case 'yes':
                width = 337;
                height = 296;
                content = {
                    html: webcam.get_html(320, 240)+'<div id="upload_results" style="background-color:#eee;"></div>'
                };
                handler =function() {
                    // take snapshot and upload to server
                    webcam.snap();
                };
            case 'no':
                pictureWindow = new Ext.Window({
                    layout:'fit',
                    width: width,
                    height: height,
                    modal: true,
                    closable: false,
                    closeAction:'hide',
                    plain: true,

                    items: [content],

                    buttons: [{
                        text: bundle.getMsg('app.form.accept'),
                        iconCls: Ext.ux.Icon('tick'),
                        handler: handler
                    },{
                        text: bundle.getMsg('app.form.cancel'),
                        iconCls: Ext.ux.Icon('cross'),
                        handler: function(){
                            pictureWindow.hide()
                        }
                    }],				
                    listeners: {
                        show: function(panel){
                            var extensions = '';
                            if(Ext.getCmp('picture').regex){
                                var array = new Array();
                                extensions = ''+Ext.getCmp('picture').regex+'';
                                extensions = extensions.replace('/^.*.(', '').replace(')$/', '');
                                
                                while(extensions && extensions.indexOf('|')>-1){
                                    var extension = extensions.substring(0, extensions.indexOf('|')).toLowerCase();
                                    if(array.indexOf(extension)<0)
                                        array.push(extension);
                                    extensions = extensions.substring(extensions.indexOf('|')+1, extensions.length);
                                }
                                extensions = '';
                                for(var i = 0; i < array.length; i++)
                                    if(i == 0)
                                        extensions = array[i];
                                    else
                                        extensions += ', ' + array[i];
                                    
                                Ext.getCmp('picture').label.dom.innerHTML = bundle.getMsg('explorer.field.file') + ' (' +extensions + ')<span style="color:red;"><sup>*</sup></span>:';
                                Ext.getCmp('picture').regexText = String.format(bundle.getMsg('app.error.fieldregexinvalid'), extensions);
                            }
                            else
                                Ext.getCmp('picture').label.dom.innerHTML = bundle.getMsg('explorer.field.file') + '<span style="color:red;"><sup>*</sup></span>:';
                        },
                        beforehide: function(){
                            documentUploadFormPanel.getForm().reset();
                            Ext.getCmp('picture').regex = null;
                        }
                    }
                });

                pictureWindow.show();
                break;
            default:
                var src = config.app_host+'/images/avatar.png';
                if(resetImg)
                    src = resetImg;
                document.getElementById(showInId).src = src;
                break;
        }        
    };

    if(processFn)
        excuteFn('no');
    else{
        var btns = {
            yes: bundle.getMsg('app.layout.device.webcam'),
            no: bundle.getMsg('app.layout.device.file'),
            cancel: bundle.getMsg('app.layout.device.reset')
        };
        if(webcamDisabled)
            btns = {
                no: bundle.getMsg('app.layout.device.file'),
                cancel: bundle.getMsg('app.layout.device.reset')
            };
        Ext.Msg.show({
            title: bundle.getMsg('app.layout.device.activation'),
            msg: bundle.getMsg('app.layout.device.activation.message'),
            buttons: btns,
            fn: excuteFn,
            animEl: 'elId',
            icon: Ext.MessageBox.QUESTION
        });
    } 
};


function checkSesionExpired(form, action) {
    try{
        var object = Ext.util.JSON.decode(action.response.responseText);	
    }
    catch(exeption){
        showSesionExpiredMsg();
    }
};
function showSesionExpiredMsg() { 
    var msg = bundle.getMsg('app.msg.warning.sesion.expired') + '<hr/><code>' + 
    String.format(bundle.getMsg('app.msg.warning.sesion.expired.explain'), '<hr/>') + '</code>';

    Ext.MessageBox.show({
        title: bundle.getMsg('app.msg.info.title'),
        msg: msg,
        progressText: '...',
        progress:true,
        closable:false
    });
    var totalsecs = 30;
    var f = function(v){
        return function(){
            if(v == totalsecs){
                if(Ext.MessageBox.isVisible()){
                    Ext.Base.msg('', bundle.getMsg('app.layout.topbar.usermenu.closesesion'));
                    Ext.MessageBox.hide();
                    window.parent.location = window.parent.location.href.replace('#', '');
                }
            }
            else 
                Ext.MessageBox.updateProgress(v/totalsecs, String.format(bundle.getMsg('app.msg.warning.sesion.expired.remain'), totalsecs-v)+'...');

        };
    };
    for(var i = 1; i <= totalsecs; i++){
        setTimeout(f(i), i*1000);
    }
};

function alertNoRecords(records, kind) { 
    if(!records || !records.length || records.length < 1)
        Ext.Base.msg('', String.format(bundle.getMsg('app.form.bbar.emptymsg'), kind ? kind : bundle.getMsg('app.form.elements').toLowerCase())); 
};

function loadStoreSuccessful(store, records, options) {
    alertNoRecords(records);
    
    Ext.Msg.show({
        title:bundle.getMsg('app.msg.info.title'),
        msg: store.reader.jsonData.message,
        buttons: Ext.Msg.OK,
        icon: Ext.MessageBox.INFO
    });
};
function loadStoreFailed(proxy, options, response, error) {
    Ext.Msg.hide();
    App.mask.hide();

    if(response && response.responseText && response.responseText.indexOf('signinForm')!=-1){
        showSesionExpiredMsg(); 
        return;
    }

    // Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError.
    var object = Ext.util.JSON.decode(response.responseText);

    var errorMessage = bundle.getMsg('app.error.systeminternal');

    // If the load from the server was successful and this method was called then
    // the reader could not read the response.
    if (object && object.success) {
        errorMessage = bundle.getMsg('app.error.dataunformated') + 
        String.format(bundle.getMsg('app.error.contactsupportwidthinfo'), '<br/>') +
        '<hr/><code>'+response.responseText+'</code>';
    } else {
        // Error on the server side will include an error message in the response.
        errorMessage = bundle.getMsg('app.error.systeminternal') + String.format(bundle.getMsg('app.error.contactsupportwidthinfo'), '<br/>') + '<hr/><code>';
        if (object && object.message)
            errorMessage += object.message+"<br/>";

        errorMessage += options.url+"<br/>"+
        bundle.getMsg('app.form.status') + ": " + response.status + "<br/>"+
        bundle.getMsg('app.form.statustext')+": " + response.statusText;

        errorMessage += '</code>';
    }
    Ext.Msg.show({
        title:bundle.getMsg('app.msg.error.title'),
        msg: errorMessage,
        buttons: Ext.Msg.OK,
        icon: Ext.MessageBox.ERROR
    });
};

function submitFormSuccessful(entity, form, action, button, isnew, resetFn, callbackFn) {
    var object = Ext.util.JSON.decode(action.response.responseText);
    if (object && object.data && object.data.mailline)
        executeMailline(Ext.util.JSON.decode(object.data.mailline));
    
    if(button)
        switch(button.id){
            case window[entity].window.submitBtn.id:
                resetFn();
                loadFormSuccessful(form, action);  
                window[entity].window.hide();
                break;
            case window[entity].window.applyBtn.id:
                if(isnew){
                    resetFn();
                    loadFormSuccessful(form, action, !isnew); 
                }
                break;
            default:
                break;
        }

    if(callbackFn){
        var obj = Ext.util.JSON.decode(action.response.responseText);
        if(callbackFn.fn){
            callbackFn.params.push(obj);
            callbackFn.fn(callbackFn.params);
        }
        else
            callbackFn(obj);
    }
};

function loadFormSuccessful(form, action, unreset) {
    try{
        var object = Ext.util.JSON.decode(action.response.responseText);
        var position = config.app_showmessageonformloadposition;
        if(unreset)
            position = 'top';
        switch(position){
            case 'top':
                Ext.Base.msg('', bundle.getMsg(object.message));
                break;
            default:
                Ext.Msg.show({
                    title:bundle.getMsg('app.msg.info.title'),
                    msg: bundle.getMsg(object.message),
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.INFO
                });
                break;
        }
        
        if (!unreset && form.id)
            form.reset();
    }
    catch(exeption){
        showSesionExpiredMsg();
    }
};
function loadFormFailed(form, action) {
    Ext.Msg.hide();
    App.mask.hide();

    var failureMessage = bundle.getMsg('app.error.loadingdata');
    var object;
    try{
        object = Ext.util.JSON.decode(action.response.responseText);
    }
    catch (e){
        object = Ext.util.JSON.decode(action.response);			
    }
    
    switch (action.failureType) {
        // Failure type returned when no field values are returned in the response's data property or the successProperty value is false.
        case Ext.form.Action.LOAD_FAILURE:
            failureMessage = object.message;
            break;
        // Failure type returned when a communication error happens when attempting to send a request to the remote server.
        case Ext.form.Action.CONNECT_FAILURE:				
            failureMessage = String.format(bundle.getMsg('app.error.contactsupportwidthinfo'), '<br/>') +
            bundle.getMsg('app.form.status') + ": " + action.response.status +
            ", "+bundle.getMsg('app.form.statustext')+": " + action.response.statusText;
            break;
        case Ext.form.Action.CLIENT_INVALID:
            failureMessage = bundle.getMsg('app.error.fieldvalidation');
            break;
        case Ext.form.Action.SERVER_INVALID:
            try{
                var obj = Ext.decode(action.result.message);
                if(!obj)
                    throw new Exception(action.result.message);
                if(obj.msg)
                    failureMessage = bundle.getMsg(obj.msg); 
                for(var i = 0; obj.params && i < obj.params.length; i++){
                    var msg = bundle.getMsg(obj.params[i]);
                    if(msg.indexOf('.undefined') > -1)
                        failureMessage = failureMessage.replace('{'+i+'}', obj.params[i]);
                    else
                        failureMessage = failureMessage.replace('{'+i+'}', msg);
                }
                
                Ext.Msg.show({
                    title:bundle.getMsg('app.msg.warning.title'),
                    msg: failureMessage,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.WARNING
                });
                return;
            }
            catch (e){
                failureMessage = bundle.getMsg(action.result.message); 		
            }
            break;
        default:
            break;
    }
    Ext.Msg.show({
        title:bundle.getMsg('app.msg.error.title'),
        msg: failureMessage,
        buttons: Ext.Msg.OK,
        icon: Ext.MessageBox.ERROR
    });
};

function requestSuccessful(response, options) {
    try{
        var object = Ext.util.JSON.decode(response.responseText);

        if (object.success) {
            switch(config.app_showmessageonformloadposition){
                case 'top':
                    Ext.Base.msg('', bundle.getMsg(object.message));
                    break;
                default:
                    Ext.Msg.show({
                        title:bundle.getMsg('app.msg.info.title'),
                        msg: bundle.getMsg(object.message),
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.INFO
                    });
                    break;
            }
        } else {
            Ext.Msg.show({
                title:bundle.getMsg('app.msg.error.title'),
                msg: bundle.getMsg(object.message),
                buttons: Ext.Msg.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    }
    catch(exeption){
        showSesionExpiredMsg();
    }
};
function requestFailed(response, options) {
    Ext.Msg.hide();
    App.mask.hide();

    var object = Ext.util.JSON.decode(response.responseText);

    var msg = bundle.getMsg('app.error.systeminternal') + String.format(bundle.getMsg('app.error.contactsupportwidthinfo'), '<br/>') +'<hr/><code>'+ bundle.getMsg('app.form.status') + ": " + response.status + ", " + bundle.getMsg('app.form.statustext')+": " + response.statusText;
    if (object && object.message)
        msg+= "<br/><b>" + object.message+"</b>";
    msg+= '</code>';

    Ext.Msg.show({
        title:bundle.getMsg('app.msg.error.title'),
        msg: msg,
        buttons: Ext.Msg.OK,
        icon: Ext.MessageBox.ERROR
    });
};

function treeContainerClick(panel){
    panel.getSelectionModel().clearSelections();
};

function beforeloadStore(store, options) {
    store.baseParams.entityid = config.app_entityid;
};

function executeMailline(mailline, ignoremsg) {
    var emailFn = function(step){                            
        if(step < mailline.length && mailline[step]){
            var subject = '';
            if(mailline[step].subject.msg && mailline[step].subject.msg != ''){
                subject = bundle.getMsg(mailline[step].subject.msg);
                for(var i = 0; mailline[step].subject.params && i < mailline[step].subject.params.length; i++)
                    subject = String.format(subject, mailline[step].subject.params[i]);
            }
                                        
            new Ext.data.Connection().request({
                url: config.app_host + '/mail/request/method/send',
                params: {
                    sendto: mailline[step].sendto,
                    subject: subject,
                    partial: mailline[step].partial,
                    params: '['+Ext.encode(mailline[step].params)+']'
                },
                method: 'POST',
                callback : function(options, success, response) {
                    var json = Ext.decode(response.responseText);
                    if(!json.success && !ignoremsg)
                        Ext.Base.msg('', String.format(bundle.getMsg('app.error.sendmail.fail'), String.format(bundle.getMsg(mailline[step].subject.msg), mailline[step].subject.params[0]), mailline[step].sendto)); 
                    step++;
                    emailFn(step);
                }
            });
        }
    };
                                
    emailFn(0);
};

// for exporting database from instal.php and from metadata module
function exportDbFn(callback) {
    var processTable = function(obj, nextFn) {
        var tables = obj.tables;
        var total = obj.total;
        var json = obj.json;
                
        var start = (tables.length-total)*-1;
        if(tables && tables.length>0){
            var currenttable = Ext.util.Format.ellipsis(tables[0], 30);
                            
            Ext.MessageBox.progress(bundle.getMsg('app.msg.wait.title'), String.format(bundle.getMsg('metadata.action.export.description'), start+1, total) + '...');
            Ext.MessageBox.updateProgress(start/total, currenttable);
                            
            new Ext.data.Connection().request({
                url: config.app_host+'/db/request/method/exporttable',
                method: 'POST',
                params: {   
                    table: tables[0],
                    location: json.location
                },
                callback : function(options, success, response) {
                    obj.tables.splice(0,1);
                    nextFn(obj, processTable);
                }
            });
        }
        else{
            new Ext.data.Connection().request({
                url: config.app_host+'/db/request/method/afterexporttables',
                params: {
                    location: json.location
                },
                method: 'POST',
                callback : function(options, success, response) {
                    
                    Ext.MessageBox.hide();  
            
                    var msg=App.mask.msg;
                    App.mask.msg=bundle.getMsg('metadata.action.export.gzipingfile')+'...';
                    App.mask.show();
                        
                    new Ext.data.Connection().request({
                        url: config.app_host+'/file/request/method/gzipfile',
                        params: {
                            source: 'db/'+json.location+'.sql',
                            unlinksource: true
                        },
                        method: 'POST',
                        callback : function(options, success, response) {
                            App.mask.hide();
                            App.mask.msg = msg;
                    
                            var json = Ext.decode(response.responseText); 
                    
                            window.open(config.app_host + '/uploads/'+json.message);
                            if(callback)
                                callback();
                        }
                    });
            
            
                }
            });
            
            
        }
    };
             
    getDbTablesFn(processTable, processTable);
                    
};
function getDbTablesFn(process, callback) {
    var msg=App.mask.msg;
    App.mask.msg=bundle.getMsg('metadata.action.export.findingtables')+'...';
    App.mask.show();
                        
    new Ext.data.Connection().request({
        url: config.app_host+'/db/request/method/gettables',
        params: {
            tables: '*'
        },
        method: 'POST',
        callback : function(options, success, response) {
            App.mask.hide();
            App.mask.msg = msg;
                    
            var json = Ext.decode(response.responseText); 
                                        
            var obj = new Object;
            obj.json = json;
            obj.tables = json.message;
            obj.total = obj.tables.length;
                    
            process(obj, callback);
        }
    });
};